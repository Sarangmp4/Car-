

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon May 20 22:12:03 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    30   000000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4580 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65   000000                     
    66                           	psect	idataCOMRAM
    67   000D78                     __pidataCOMRAM:
    68                           	callstack 0
    69                           
    70                           ;initializer for dashboard@F10484
    71   000D78  3E                 	db	low STR_3
    72   000D79  41                 	db	low STR_4
    73   000D7A  3B                 	db	low STR_5
    74   000D7B  2F                 	db	low STR_6
    75   000D7C  32                 	db	low STR_7
    76   000D7D  35                 	db	low STR_8
    77   000D7E  38                 	db	low STR_9
    78   000D7F  2C                 	db	low STR_10
    79                           
    80                           ;initializer for password@F10488
    81   000D80  30                 	db	48
    82   000D81  30                 	db	48
    83   000D82  30                 	db	48
    84   000D83  30                 	db	48
    85                           
    86                           ;initializer for read_switches@once
    87   000D84  01                 	db	1
    88   000000                     _ADRESL	set	4035
    89   000000                     _ADRESH	set	4036
    90   000000                     _VCFG1	set	32269
    91   000000                     _GODONE	set	32273
    92   000000                     _PORTBbits	set	3969
    93   000000                     _ADCON1	set	4033
    94   000000                     _TRISD	set	3989
    95   000000                     _ADCON0	set	4034
    96   000000                     _RD7	set	31775
    97   000000                     _RC0	set	31760
    98   000000                     _RC2	set	31762
    99   000000                     _GO	set	32273
   100   000000                     _ADON	set	32272
   101   000000                     _VCFG0	set	32268
   102   000000                     _ADCS2	set	32258
   103   000000                     _ADCS1	set	32257
   104   000000                     _ADCS0	set	32256
   105   000000                     _ACQT0	set	32259
   106   000000                     _ACQT1	set	32260
   107   000000                     _ACQT2	set	32261
   108   000000                     _PORTB	set	3969
   109   000000                     _RC1	set	31761
   110   000000                     _ADFM	set	32263
   111   000000                     _RBPU	set	32655
   112   000000                     _TRISB	set	3987
   113   000000                     _TRISC	set	3988
   114   000000                     _PORTD	set	3971
   115   000000                     _TRISD7	set	31919
   116                           
   117                           	psect	smallconst
   118   000600                     __psmallconst:
   119                           	callstack 0
   120   000600  00                 	db	0
   121   000601                     STR_11:
   122   000601  20                 	db	32
   123   000602  45                 	db	69	;'E'
   124   000603  6E                 	db	110	;'n'
   125   000604  74                 	db	116	;'t'
   126   000605  65                 	db	101	;'e'
   127   000606  72                 	db	114	;'r'
   128   000607  20                 	db	32
   129   000608  50                 	db	80	;'P'
   130   000609  61                 	db	97	;'a'
   131   00060A  73                 	db	115	;'s'
   132   00060B  73                 	db	115	;'s'
   133   00060C  77                 	db	119	;'w'
   134   00060D  6F                 	db	111	;'o'
   135   00060E  72                 	db	114	;'r'
   136   00060F  64                 	db	100	;'d'
   137   000610  20                 	db	32
   138   000611  00                 	db	0
   139   000612                     STR_1:
   140   000612  20                 	db	32
   141   000613  20                 	db	32
   142   000614  54                 	db	84	;'T'
   143   000615  49                 	db	73	;'I'
   144   000616  4D                 	db	77	;'M'
   145   000617  45                 	db	69	;'E'
   146   000618  20                 	db	32
   147   000619  20                 	db	32
   148   00061A  20                 	db	32
   149   00061B  20                 	db	32
   150   00061C  45                 	db	69	;'E'
   151   00061D  56                 	db	86	;'V'
   152   00061E  20                 	db	32
   153   00061F  20                 	db	32
   154   000620  53                 	db	83	;'S'
   155   000621  50                 	db	80	;'P'
   156   000622  00                 	db	0
   157   000623                     STR_2:
   158   000623  30                 	db	48	;'0'
   159   000624  30                 	db	48	;'0'
   160   000625  3A                 	db	58	;':'
   161   000626  30                 	db	48	;'0'
   162   000627  30                 	db	48	;'0'
   163   000628  3A                 	db	58	;':'
   164   000629  30                 	db	48	;'0'
   165   00062A  30                 	db	48	;'0'
   166   00062B  00                 	db	0
   167   00062C                     STR_10:
   168   00062C  43                 	db	67	;'C'
   169   00062D  20                 	db	32
   170   00062E  00                 	db	0
   171   00062F                     STR_6:
   172   00062F  47                 	db	71	;'G'
   173   000630  31                 	db	49	;'1'
   174   000631  00                 	db	0
   175   000632                     STR_7:
   176   000632  47                 	db	71	;'G'
   177   000633  32                 	db	50	;'2'
   178   000634  00                 	db	0
   179   000635                     STR_8:
   180   000635  47                 	db	71	;'G'
   181   000636  33                 	db	51	;'3'
   182   000637  00                 	db	0
   183   000638                     STR_9:
   184   000638  47                 	db	71	;'G'
   185   000639  34                 	db	52	;'4'
   186   00063A  00                 	db	0
   187   00063B                     STR_5:
   188   00063B  47                 	db	71	;'G'
   189   00063C  4E                 	db	78	;'N'
   190   00063D  00                 	db	0
   191   00063E                     STR_3:
   192   00063E  4F                 	db	79	;'O'
   193   00063F  4E                 	db	78	;'N'
   194   000640  00                 	db	0
   195   000641                     STR_4:
   196   000641  47                 	db	71	;'G'
   197   000642  52                 	db	82	;'R'
   198   000643  00                 	db	0
   199   000644  00                 	db	0	; dummy byte at the end
   200   000000                     
   201                           ; #config settings
   202                           
   203                           	psect	cinit
   204   000C5A                     __pcinit:
   205                           	callstack 0
   206   000C5A                     start_initialization:
   207                           	callstack 0
   208   000C5A                     __initialization:
   209                           	callstack 0
   210                           
   211                           ; Initialize objects allocated to COMRAM (13 bytes)
   212                           ; load TBLPTR registers with __pidataCOMRAM
   213   000C5A  0E78               	movlw	low __pidataCOMRAM
   214   000C5C  6EF6               	movwf	tblptrl,c
   215   000C5E  0E0D               	movlw	high __pidataCOMRAM
   216   000C60  6EF7               	movwf	tblptrh,c
   217   000C62  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   218   000C64  6EF8               	movwf	tblptru,c
   219   000C66  EE00  F015         	lfsr	0,__pdataCOMRAM
   220   000C6A  EE10 F00D          	lfsr	1,13
   221   000C6E                     copy_data0:
   222   000C6E  0009               	tblrd		*+
   223   000C70  CFF5 FFEE          	movff	tablat,postinc0
   224   000C74  50E5               	movf	postdec1,w,c
   225   000C76  50E1               	movf	fsr1l,w,c
   226   000C78  E1FA               	bnz	copy_data0
   227                           
   228                           ; Clear objects allocated to COMRAM (6 bytes)
   229   000C7A  6A27               	clrf	(__pbssCOMRAM+5)& (0+255),c
   230   000C7C  6A26               	clrf	(__pbssCOMRAM+4)& (0+255),c
   231   000C7E  6A25               	clrf	(__pbssCOMRAM+3)& (0+255),c
   232   000C80  6A24               	clrf	(__pbssCOMRAM+2)& (0+255),c
   233   000C82  6A23               	clrf	(__pbssCOMRAM+1)& (0+255),c
   234   000C84  6A22               	clrf	__pbssCOMRAM& (0+255),c
   235   000C86                     end_of_initialization:
   236                           	callstack 0
   237   000C86                     __end_of__initialization:
   238                           	callstack 0
   239   000C86  0E00               	movlw	low (__Lsmallconst shr (0+16))
   240   000C88  6EF8               	movwf	tblptru,c
   241   000C8A  0E06               	movlw	high __Lsmallconst
   242   000C8C  6EF7               	movwf	tblptrh,c
   243   000C8E  0100               	movlb	0
   244   000C90  EFE7  F005         	goto	_main	;jump to C main() function
   245                           
   246                           	psect	bssCOMRAM
   247   000022                     __pbssCOMRAM:
   248                           	callstack 0
   249   000022                     _i:
   250                           	callstack 0
   251   000022                     	ds	2
   252   000024                     _adc_reg_val:
   253                           	callstack 0
   254   000024                     	ds	2
   255   000026                     read_switches@key:
   256                           	callstack 0
   257   000026                     	ds	1
   258   000027                     _key:
   259                           	callstack 0
   260   000027                     	ds	1
   261                           
   262                           	psect	dataCOMRAM
   263   000015                     __pdataCOMRAM:
   264                           	callstack 0
   265   000015                     dashboard@F10484:
   266                           	callstack 0
   267   000015                     	ds	8
   268   00001D                     password@F10488:
   269                           	callstack 0
   270   00001D                     	ds	4
   271   000021                     read_switches@once:
   272                           	callstack 0
   273   000021                     	ds	1
   274                           
   275                           	psect	cstackCOMRAM
   276   000001                     __pcstackCOMRAM:
   277                           	callstack 0
   278   000001                     ?_read_adc:
   279                           	callstack 0
   280   000001                     ?___awdiv:
   281                           	callstack 0
   282   000001                     ?___awmod:
   283                           	callstack 0
   284   000001                     clcd_write@control_bit:
   285                           	callstack 0
   286   000001                     read_switches@detection_type:
   287                           	callstack 0
   288   000001                     ___awdiv@dividend:
   289                           	callstack 0
   290   000001                     ___awmod@dividend:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x0
   294   000001                     	ds	1
   295   000002                     clcd_write@byte:
   296                           	callstack 0
   297                           
   298                           ; 1 bytes @ 0x1
   299   000002                     	ds	1
   300   000003                     ??_read_adc:
   301   000003                     ??_init_clcd:
   302   000003                     clcd_print@data:
   303                           	callstack 0
   304   000003                     ___awdiv@divisor:
   305                           	callstack 0
   306   000003                     ___awmod@divisor:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0x2
   310   000003                     	ds	1
   311   000004                     clcd_print@addr:
   312                           	callstack 0
   313                           
   314                           ; 1 bytes @ 0x3
   315   000004                     	ds	1
   316   000005                     ___awdiv@counter:
   317                           	callstack 0
   318   000005                     ___awmod@counter:
   319                           	callstack 0
   320   000005                     read_adc@reg_val:
   321                           	callstack 0
   322                           
   323                           ; 2 bytes @ 0x4
   324   000005                     	ds	1
   325   000006                     ___awdiv@sign:
   326                           	callstack 0
   327   000006                     ___awmod@sign:
   328                           	callstack 0
   329                           
   330                           ; 1 bytes @ 0x5
   331   000006                     	ds	1
   332   000007                     read_adc@channel:
   333                           	callstack 0
   334   000007                     ___awdiv@quotient:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0x6
   338   000007                     	ds	2
   339   000009                     clcd_putch@addr:
   340                           	callstack 0
   341                           
   342                           ; 1 bytes @ 0x8
   343   000009                     	ds	1
   344   00000A                     clcd_putch@data:
   345                           	callstack 0
   346                           
   347                           ; 1 bytes @ 0x9
   348   00000A                     	ds	1
   349   00000B                     password@pass:
   350                           	callstack 0
   351   00000B                     dashboard@events:
   352                           	callstack 0
   353                           
   354                           ; 8 bytes @ 0xA
   355   00000B                     	ds	4
   356   00000F                     password@temp_password:
   357                           	callstack 0
   358                           
   359                           ; 4 bytes @ 0xE
   360   00000F                     	ds	4
   361   000013                     password@key:
   362                           	callstack 0
   363                           
   364                           ; 1 bytes @ 0x12
   365   000013                     	ds	1
   366   000014                     main@main_f:
   367                           	callstack 0
   368                           
   369                           ; 1 bytes @ 0x13
   370   000014                     	ds	1
   371                           
   372 ;;
   373 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   374 ;;
   375 ;; *************** function _main *****************
   376 ;; Defined at:
   377 ;;		line 27 in file "main.c"
   378 ;; Parameters:    Size  Location     Type
   379 ;;		None
   380 ;; Auto vars:     Size  Location     Type
   381 ;;  main_f          1   19[COMRAM] unsigned char 
   382 ;;  menu_f          1    0        unsigned char 
   383 ;; Return value:  Size  Location     Type
   384 ;;                  1    wreg      void 
   385 ;; Registers used:
   386 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   387 ;; Tracked objects:
   388 ;;		On entry : 0/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   392 ;;      Params:         0       0       0       0       0       0       0
   393 ;;      Locals:         1       0       0       0       0       0       0
   394 ;;      Temps:          0       0       0       0       0       0       0
   395 ;;      Totals:         1       0       0       0       0       0       0
   396 ;;Total ram usage:        1 bytes
   397 ;; Hardware stack levels required when called: 3
   398 ;; This function calls:
   399 ;;		_dashboard
   400 ;;		_init_config
   401 ;;		_password
   402 ;;		_read_switches
   403 ;; This function is called by:
   404 ;;		Startup code after reset
   405 ;; This function uses a non-reentrant model
   406 ;;
   407                           
   408                           	psect	text0
   409   000BCE                     __ptext0:
   410                           	callstack 0
   411   000BCE                     _main:
   412                           	callstack 28
   413   000BCE                     
   414                           ;main.c: 28:     init_config();
   415   000BCE  EC84  F006         	call	_init_config	;wreg free
   416   000BD2                     
   417                           ;main.c: 30:     char main_f = 0, menu_f = 0;
   418   000BD2  0E00               	movlw	0
   419   000BD4  6E14               	movwf	main@main_f^0,c
   420   000BD6                     l1466:
   421                           
   422                           ;main.c: 33:         key = read_switches(1);
   423   000BD6  0E01               	movlw	1
   424   000BD8  ECAC  F005         	call	_read_switches
   425   000BDC  6E27               	movwf	_key^0,c
   426   000BDE                     
   427                           ;main.c: 35:         if(main_f == 0)
   428   000BDE  5014               	movf	main@main_f^0,w,c
   429   000BE0  A4D8               	btfss	status,2,c
   430   000BE2  EFF5  F005         	goto	u821
   431   000BE6  EFF7  F005         	goto	u820
   432   000BEA                     u821:
   433   000BEA  EFFB  F005         	goto	l1472
   434   000BEE                     u820:
   435   000BEE                     
   436                           ;main.c: 36:         {;main.c: 37:             dashboard();
   437   000BEE  EC23  F003         	call	_dashboard	;wreg free
   438                           
   439                           ;main.c: 38:         }
   440   000BF2  EFEB  F005         	goto	l1466
   441   000BF6                     l1472:
   442   000BF6  0414               	decf	main@main_f^0,w,c
   443   000BF8  A4D8               	btfss	status,2,c
   444   000BFA  EF01  F006         	goto	u831
   445   000BFE  EF03  F006         	goto	u830
   446   000C02                     u831:
   447   000C02  EFEB  F005         	goto	l1466
   448   000C06                     u830:
   449   000C06                     
   450                           ;main.c: 40:         {;main.c: 41:             password(key);
   451   000C06  5027               	movf	_key^0,w,c
   452   000C08  EC5D  F005         	call	_password
   453   000C0C  EFEB  F005         	goto	l1466
   454   000C10  EF00  F000         	goto	start
   455   000C14                     __end_of_main:
   456                           	callstack 0
   457                           
   458 ;; *************** function _read_switches *****************
   459 ;; Defined at:
   460 ;;		line 89 in file "matrix_keypad.c"
   461 ;; Parameters:    Size  Location     Type
   462 ;;  detection_ty    1    wreg     unsigned char 
   463 ;; Auto vars:     Size  Location     Type
   464 ;;  detection_ty    1    0[COMRAM] unsigned char 
   465 ;; Return value:  Size  Location     Type
   466 ;;                  1    wreg      unsigned char 
   467 ;; Registers used:
   468 ;;		wreg, status,2, status,0, cstack
   469 ;; Tracked objects:
   470 ;;		On entry : 0/0
   471 ;;		On exit  : 0/0
   472 ;;		Unchanged: 0/0
   473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   474 ;;      Params:         0       0       0       0       0       0       0
   475 ;;      Locals:         1       0       0       0       0       0       0
   476 ;;      Temps:          0       0       0       0       0       0       0
   477 ;;      Totals:         1       0       0       0       0       0       0
   478 ;;Total ram usage:        1 bytes
   479 ;; Hardware stack levels used: 1
   480 ;; Hardware stack levels required when called: 1
   481 ;; This function calls:
   482 ;;		_scan_key
   483 ;; This function is called by:
   484 ;;		_main
   485 ;; This function uses a non-reentrant model
   486 ;;
   487                           
   488                           	psect	text1
   489   000B58                     __ptext1:
   490                           	callstack 0
   491   000B58                     _read_switches:
   492                           	callstack 29
   493                           
   494                           ;incstack = 0
   495                           ;read_switches@detection_type stored from wreg
   496   000B58  6E01               	movwf	read_switches@detection_type^0,c
   497   000B5A                     
   498                           ;matrix_keypad.c: 89: unsigned char read_switches(unsigned char detection_type);matrix_k
      +                          eypad.c: 90: {;matrix_keypad.c: 91:  static unsigned char once = 1, key;;matrix_keypad.c
      +                          : 93:  if (detection_type == 1)
   499   000B5A  0401               	decf	read_switches@detection_type^0,w,c
   500   000B5C  A4D8               	btfss	status,2,c
   501   000B5E  EFB3  F005         	goto	u301
   502   000B62  EFB5  F005         	goto	u300
   503   000B66                     u301:
   504   000B66  EFD9  F005         	goto	l1146
   505   000B6A                     u300:
   506   000B6A                     
   507                           ;matrix_keypad.c: 94:  {;matrix_keypad.c: 95:   key = scan_key();
   508   000B6A  ECCB  F003         	call	_scan_key	;wreg free
   509   000B6E  6E26               	movwf	read_switches@key^0,c
   510   000B70                     
   511                           ;matrix_keypad.c: 96:   if(key != 0xFF && once )
   512   000B70  2826               	incf	read_switches@key^0,w,c
   513   000B72  B4D8               	btfsc	status,2,c
   514   000B74  EFBE  F005         	goto	u311
   515   000B78  EFC0  F005         	goto	u310
   516   000B7C                     u311:
   517   000B7C  EFCD  F005         	goto	l1142
   518   000B80                     u310:
   519   000B80  5021               	movf	read_switches@once^0,w,c
   520   000B82  B4D8               	btfsc	status,2,c
   521   000B84  EFC6  F005         	goto	u321
   522   000B88  EFC8  F005         	goto	u320
   523   000B8C                     u321:
   524   000B8C  EFCD  F005         	goto	l1142
   525   000B90                     u320:
   526   000B90                     
   527                           ;matrix_keypad.c: 97:   {;matrix_keypad.c: 98:    once = 0;
   528   000B90  0E00               	movlw	0
   529   000B92  6E21               	movwf	read_switches@once^0,c
   530                           
   531                           ;matrix_keypad.c: 99:    return key;
   532   000B94  5026               	movf	read_switches@key^0,w,c
   533   000B96  EFE6  F005         	goto	l152
   534   000B9A                     l1142:
   535   000B9A  2826               	incf	read_switches@key^0,w,c
   536   000B9C  A4D8               	btfss	status,2,c
   537   000B9E  EFD3  F005         	goto	u331
   538   000BA2  EFD5  F005         	goto	u330
   539   000BA6                     u331:
   540   000BA6  EFE5  F005         	goto	l1152
   541   000BAA                     u330:
   542   000BAA                     
   543                           ;matrix_keypad.c: 102:   {;matrix_keypad.c: 103:    once = 1;
   544   000BAA  0E01               	movlw	1
   545   000BAC  6E21               	movwf	read_switches@once^0,c
   546   000BAE  EFE5  F005         	goto	l1152
   547   000BB2                     l1146:
   548   000BB2  5001               	movf	read_switches@detection_type^0,w,c
   549   000BB4  A4D8               	btfss	status,2,c
   550   000BB6  EFDF  F005         	goto	u341
   551   000BBA  EFE1  F005         	goto	u340
   552   000BBE                     u341:
   553   000BBE  EFE5  F005         	goto	l1152
   554   000BC2                     u340:
   555   000BC2                     
   556                           ;matrix_keypad.c: 107:  {;matrix_keypad.c: 108:   return scan_key();
   557   000BC2  ECCB  F003         	call	_scan_key	;wreg free
   558   000BC6  EFE6  F005         	goto	l152
   559   000BCA                     l1152:
   560                           
   561                           ;matrix_keypad.c: 111:  return 0xFF;
   562   000BCA  0EFF               	movlw	255
   563   000BCC                     l152:
   564   000BCC  0012               	return		;funcret
   565   000BCE                     __end_of_read_switches:
   566                           	callstack 0
   567                           
   568 ;; *************** function _scan_key *****************
   569 ;; Defined at:
   570 ;;		line 19 in file "matrix_keypad.c"
   571 ;; Parameters:    Size  Location     Type
   572 ;;		None
   573 ;; Auto vars:     Size  Location     Type
   574 ;;		None
   575 ;; Return value:  Size  Location     Type
   576 ;;                  1    wreg      unsigned char 
   577 ;; Registers used:
   578 ;;		wreg
   579 ;; Tracked objects:
   580 ;;		On entry : 0/0
   581 ;;		On exit  : 0/0
   582 ;;		Unchanged: 0/0
   583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   584 ;;      Params:         0       0       0       0       0       0       0
   585 ;;      Locals:         0       0       0       0       0       0       0
   586 ;;      Temps:          0       0       0       0       0       0       0
   587 ;;      Totals:         0       0       0       0       0       0       0
   588 ;;Total ram usage:        0 bytes
   589 ;; Hardware stack levels used: 1
   590 ;; This function calls:
   591 ;;		Nothing
   592 ;; This function is called by:
   593 ;;		_read_switches
   594 ;; This function uses a non-reentrant model
   595 ;;
   596                           
   597                           	psect	text2
   598   000796                     __ptext2:
   599                           	callstack 0
   600   000796                     _scan_key:
   601                           	callstack 29
   602   000796                     
   603                           ;matrix_keypad.c: 21:  PORTBbits.RB5 = 0;
   604   000796  9A81               	bcf	129,5,c	;volatile
   605                           
   606                           ;matrix_keypad.c: 22:  PORTBbits.RB6 = 1;
   607   000798  8C81               	bsf	129,6,c	;volatile
   608                           
   609                           ;matrix_keypad.c: 23:  PORTBbits.RB7 = 1;
   610   00079A  8E81               	bsf	129,7,c	;volatile
   611                           
   612                           ;matrix_keypad.c: 25:  if (PORTBbits.RB1 == 0)
   613   00079C  B281               	btfsc	129,1,c	;volatile
   614   00079E  EFD3  F003         	goto	u61
   615   0007A2  EFD5  F003         	goto	u60
   616   0007A6                     u61:
   617   0007A6  EFD8  F003         	goto	l122
   618   0007AA                     u60:
   619   0007AA                     
   620                           ;matrix_keypad.c: 26:  {;matrix_keypad.c: 27:   return 1;
   621   0007AA  0E01               	movlw	1
   622   0007AC  EF4E  F004         	goto	l123
   623   0007B0                     l122:
   624   0007B0  B481               	btfsc	129,2,c	;volatile
   625   0007B2  EFDD  F003         	goto	u71
   626   0007B6  EFDF  F003         	goto	u70
   627   0007BA                     u71:
   628   0007BA  EFE2  F003         	goto	l125
   629   0007BE                     u70:
   630   0007BE                     
   631                           ;matrix_keypad.c: 30:  {;matrix_keypad.c: 31:   return 4;
   632   0007BE  0E04               	movlw	4
   633   0007C0  EF4E  F004         	goto	l123
   634   0007C4                     l125:
   635   0007C4  B681               	btfsc	129,3,c	;volatile
   636   0007C6  EFE7  F003         	goto	u81
   637   0007CA  EFE9  F003         	goto	u80
   638   0007CE                     u81:
   639   0007CE  EFEC  F003         	goto	l127
   640   0007D2                     u80:
   641   0007D2                     
   642                           ;matrix_keypad.c: 34:  {;matrix_keypad.c: 35:   return 7;
   643   0007D2  0E07               	movlw	7
   644   0007D4  EF4E  F004         	goto	l123
   645   0007D8                     l127:
   646   0007D8  B881               	btfsc	129,4,c	;volatile
   647   0007DA  EFF1  F003         	goto	u91
   648   0007DE  EFF3  F003         	goto	u90
   649   0007E2                     u91:
   650   0007E2  EFF6  F003         	goto	l124
   651   0007E6                     u90:
   652   0007E6                     
   653                           ;matrix_keypad.c: 38:  {;matrix_keypad.c: 39:   return 10;
   654   0007E6  0E0A               	movlw	10
   655   0007E8  EF4E  F004         	goto	l123
   656   0007EC                     l124:
   657                           
   658                           ;matrix_keypad.c: 42:  PORTBbits.RB5 = 1;
   659   0007EC  8A81               	bsf	129,5,c	;volatile
   660                           
   661                           ;matrix_keypad.c: 43:  PORTBbits.RB6 = 0;
   662   0007EE  9C81               	bcf	129,6,c	;volatile
   663                           
   664                           ;matrix_keypad.c: 44:  PORTBbits.RB7 = 1;
   665   0007F0  8E81               	bsf	129,7,c	;volatile
   666                           
   667                           ;matrix_keypad.c: 46:  if (PORTBbits.RB1 == 0)
   668   0007F2  B281               	btfsc	129,1,c	;volatile
   669   0007F4  EFFE  F003         	goto	u101
   670   0007F8  EF00  F004         	goto	u100
   671   0007FC                     u101:
   672   0007FC  EF03  F004         	goto	l130
   673   000800                     u100:
   674   000800                     
   675                           ;matrix_keypad.c: 47:  {;matrix_keypad.c: 48:   return 2;
   676   000800  0E02               	movlw	2
   677   000802  EF4E  F004         	goto	l123
   678   000806                     l130:
   679   000806  B481               	btfsc	129,2,c	;volatile
   680   000808  EF08  F004         	goto	u111
   681   00080C  EF0A  F004         	goto	u110
   682   000810                     u111:
   683   000810  EF0D  F004         	goto	l132
   684   000814                     u110:
   685   000814                     
   686                           ;matrix_keypad.c: 51:  {;matrix_keypad.c: 52:   return 5;
   687   000814  0E05               	movlw	5
   688   000816  EF4E  F004         	goto	l123
   689   00081A                     l132:
   690   00081A  B681               	btfsc	129,3,c	;volatile
   691   00081C  EF12  F004         	goto	u121
   692   000820  EF14  F004         	goto	u120
   693   000824                     u121:
   694   000824  EF17  F004         	goto	l134
   695   000828                     u120:
   696   000828                     
   697                           ;matrix_keypad.c: 55:  {;matrix_keypad.c: 56:   return 8;
   698   000828  0E08               	movlw	8
   699   00082A  EF4E  F004         	goto	l123
   700   00082E                     l134:
   701   00082E  B881               	btfsc	129,4,c	;volatile
   702   000830  EF1C  F004         	goto	u131
   703   000834  EF1E  F004         	goto	u130
   704   000838                     u131:
   705   000838  EF21  F004         	goto	l131
   706   00083C                     u130:
   707   00083C                     
   708                           ;matrix_keypad.c: 59:  {;matrix_keypad.c: 60:   return 11;
   709   00083C  0E0B               	movlw	11
   710   00083E  EF4E  F004         	goto	l123
   711   000842                     l131:
   712                           
   713                           ;matrix_keypad.c: 63:  PORTBbits.RB5 = 1;
   714   000842  8A81               	bsf	129,5,c	;volatile
   715                           
   716                           ;matrix_keypad.c: 64:  PORTBbits.RB6 = 1;
   717   000844  8C81               	bsf	129,6,c	;volatile
   718                           
   719                           ;matrix_keypad.c: 65:  PORTBbits.RB7 = 0;
   720   000846  9E81               	bcf	129,7,c	;volatile
   721                           
   722                           ;matrix_keypad.c: 67:  PORTBbits.RB7 = 0;
   723   000848  9E81               	bcf	129,7,c	;volatile
   724                           
   725                           ;matrix_keypad.c: 69:  if (PORTBbits.RB1 == 0)
   726   00084A  B281               	btfsc	129,1,c	;volatile
   727   00084C  EF2A  F004         	goto	u141
   728   000850  EF2C  F004         	goto	u140
   729   000854                     u141:
   730   000854  EF2F  F004         	goto	l137
   731   000858                     u140:
   732   000858                     
   733                           ;matrix_keypad.c: 70:  {;matrix_keypad.c: 71:   return 3;
   734   000858  0E03               	movlw	3
   735   00085A  EF4E  F004         	goto	l123
   736   00085E                     l137:
   737   00085E  B481               	btfsc	129,2,c	;volatile
   738   000860  EF34  F004         	goto	u151
   739   000864  EF36  F004         	goto	u150
   740   000868                     u151:
   741   000868  EF39  F004         	goto	l139
   742   00086C                     u150:
   743   00086C                     
   744                           ;matrix_keypad.c: 74:  {;matrix_keypad.c: 75:   return 6;
   745   00086C  0E06               	movlw	6
   746   00086E  EF4E  F004         	goto	l123
   747   000872                     l139:
   748   000872  B681               	btfsc	129,3,c	;volatile
   749   000874  EF3E  F004         	goto	u161
   750   000878  EF40  F004         	goto	u160
   751   00087C                     u161:
   752   00087C  EF43  F004         	goto	l141
   753   000880                     u160:
   754   000880                     
   755                           ;matrix_keypad.c: 78:  {;matrix_keypad.c: 79:   return 9;
   756   000880  0E09               	movlw	9
   757   000882  EF4E  F004         	goto	l123
   758   000886                     l141:
   759   000886  B881               	btfsc	129,4,c	;volatile
   760   000888  EF48  F004         	goto	u171
   761   00088C  EF4A  F004         	goto	u170
   762   000890                     u171:
   763   000890  EF4D  F004         	goto	l140
   764   000894                     u170:
   765   000894                     
   766                           ;matrix_keypad.c: 82:  {;matrix_keypad.c: 83:   return 12;
   767   000894  0E0C               	movlw	12
   768   000896  EF4E  F004         	goto	l123
   769   00089A                     l140:
   770   00089A                     
   771                           ;matrix_keypad.c: 86:  return 0xFF;
   772   00089A  0EFF               	movlw	255
   773   00089C                     l123:
   774   00089C  0012               	return		;funcret
   775   00089E                     __end_of_scan_key:
   776                           	callstack 0
   777                           
   778 ;; *************** function _password *****************
   779 ;; Defined at:
   780 ;;		line 29 in file "password.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;  key             1    wreg     unsigned char 
   783 ;; Auto vars:     Size  Location     Type
   784 ;;  key             1   18[COMRAM] unsigned char 
   785 ;;  temp_passwor    4   14[COMRAM] unsigned char [4]
   786 ;;  pass            4   10[COMRAM] unsigned char [4]
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   796 ;;      Params:         0       0       0       0       0       0       0
   797 ;;      Locals:         9       0       0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0       0       0
   799 ;;      Totals:         9       0       0       0       0       0       0
   800 ;;Total ram usage:        9 bytes
   801 ;; Hardware stack levels used: 1
   802 ;; Hardware stack levels required when called: 2
   803 ;; This function calls:
   804 ;;		_clcd_print
   805 ;;		_clcd_putch
   806 ;; This function is called by:
   807 ;;		_main
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811                           	psect	text3
   812   000ABA                     __ptext3:
   813                           	callstack 0
   814   000ABA                     _password:
   815                           	callstack 28
   816                           
   817                           ;incstack = 0
   818                           ;password@key stored from wreg
   819   000ABA  6E13               	movwf	password@key^0,c
   820   000ABC                     
   821                           ;password.c: 29: void password(char key);password.c: 30: {;password.c: 31:     clcd_prin
      +                          t(" Enter Password ", (0x80 + (0)));
   822   000ABC  0E01               	movlw	low STR_11
   823   000ABE  6E03               	movwf	clcd_print@data^0,c
   824   000AC0  0E80               	movlw	128
   825   000AC2  6E04               	movwf	clcd_print@addr^0,c
   826   000AC4  EC4A  F006         	call	_clcd_print	;wreg free
   827   000AC8                     
   828                           ;password.c: 32:     char pass[4]="0000";
   829   000AC8  C01D  F00B         	movff	password@F10488,password@pass
   830   000ACC  C01E  F00C         	movff	password@F10488+1,password@pass+1
   831   000AD0  C01F  F00D         	movff	password@F10488+2,password@pass+2
   832   000AD4  C020  F00E         	movff	password@F10488+3,password@pass+3
   833   000AD8                     
   834                           ;password.c: 33:     char temp_password[4];;password.c: 35:     if (key == 5) {
   835   000AD8  0E05               	movlw	5
   836   000ADA  1813               	xorwf	password@key^0,w,c
   837   000ADC  A4D8               	btfss	status,2,c
   838   000ADE  EF73  F005         	goto	u791
   839   000AE2  EF75  F005         	goto	u790
   840   000AE6                     u791:
   841   000AE6  EF85  F005         	goto	l1448
   842   000AEA                     u790:
   843   000AEA                     
   844                           ;password.c: 36:             temp_password[i] = '0';
   845   000AEA  5022               	movf	_i^0,w,c
   846   000AEC  0F0F               	addlw	low password@temp_password
   847   000AEE  6ED9               	movwf	fsr2l,c
   848   000AF0  6ADA               	clrf	fsr2h,c
   849   000AF2  0E30               	movlw	48
   850   000AF4  6EDF               	movwf	indf2,c
   851   000AF6                     
   852                           ;password.c: 37:             clcd_putch('*', (0xC0 + (i)));
   853   000AF6  5022               	movf	_i^0,w,c
   854   000AF8  0FC0               	addlw	192
   855   000AFA  6E09               	movwf	clcd_putch@addr^0,c
   856   000AFC  0E2A               	movlw	42
   857   000AFE  ECA7  F006         	call	_clcd_putch
   858   000B02                     l1446:
   859                           
   860                           ;password.c: 38:             i++;
   861   000B02  4A22               	infsnz	_i^0,f,c
   862   000B04  2A23               	incf	(_i+1)^0,f,c
   863                           
   864                           ;password.c: 40:         } else if (key == 6) {
   865   000B06  EF9C  F005         	goto	l1456
   866   000B0A                     l1448:
   867   000B0A  0E06               	movlw	6
   868   000B0C  1813               	xorwf	password@key^0,w,c
   869   000B0E  A4D8               	btfss	status,2,c
   870   000B10  EF8C  F005         	goto	u801
   871   000B14  EF8E  F005         	goto	u800
   872   000B18                     u801:
   873   000B18  EF9C  F005         	goto	l1456
   874   000B1C                     u800:
   875   000B1C                     
   876                           ;password.c: 41:             temp_password[i] = '1';
   877   000B1C  5022               	movf	_i^0,w,c
   878   000B1E  0F0F               	addlw	low password@temp_password
   879   000B20  6ED9               	movwf	fsr2l,c
   880   000B22  6ADA               	clrf	fsr2h,c
   881   000B24  0E31               	movlw	49
   882   000B26  6EDF               	movwf	indf2,c
   883   000B28                     
   884                           ;password.c: 42:             clcd_putch('*', (0xC0 + (i)));
   885   000B28  5022               	movf	_i^0,w,c
   886   000B2A  0FC0               	addlw	192
   887   000B2C  6E09               	movwf	clcd_putch@addr^0,c
   888   000B2E  0E2A               	movlw	42
   889   000B30  ECA7  F006         	call	_clcd_putch
   890   000B34  EF81  F005         	goto	l1446
   891   000B38                     l1456:
   892                           
   893                           ;password.c: 45:         if (i == 4) {
   894   000B38  0E04               	movlw	4
   895   000B3A  1822               	xorwf	_i^0,w,c
   896   000B3C  1023               	iorwf	(_i+1)^0,w,c
   897   000B3E  A4D8               	btfss	status,2,c
   898   000B40  EFA4  F005         	goto	u811
   899   000B44  EFA6  F005         	goto	u810
   900   000B48                     u811:
   901   000B48  EFAB  F005         	goto	l204
   902   000B4C                     u810:
   903   000B4C                     
   904                           ;password.c: 46:             temp_password[i] = '\0';
   905   000B4C  5022               	movf	_i^0,w,c
   906   000B4E  0F0F               	addlw	low password@temp_password
   907   000B50  6ED9               	movwf	fsr2l,c
   908   000B52  6ADA               	clrf	fsr2h,c
   909   000B54  6ADF               	clrf	indf2,c
   910   000B56                     l204:
   911   000B56  0012               	return		;funcret
   912   000B58                     __end_of_password:
   913                           	callstack 0
   914                           
   915 ;; *************** function _init_config *****************
   916 ;; Defined at:
   917 ;;		line 15 in file "main.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   931 ;;      Params:         0       0       0       0       0       0       0
   932 ;;      Locals:         0       0       0       0       0       0       0
   933 ;;      Temps:          0       0       0       0       0       0       0
   934 ;;      Totals:         0       0       0       0       0       0       0
   935 ;;Total ram usage:        0 bytes
   936 ;; Hardware stack levels used: 1
   937 ;; Hardware stack levels required when called: 2
   938 ;; This function calls:
   939 ;;		_clcd_print
   940 ;;		_init_adc
   941 ;;		_init_clcd
   942 ;;		_init_matrix_keypad
   943 ;; This function is called by:
   944 ;;		_main
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           	psect	text4
   949   000D08                     __ptext4:
   950                           	callstack 0
   951   000D08                     _init_config:
   952                           	callstack 28
   953   000D08                     
   954                           ;main.c: 16:     init_clcd();
   955   000D08  EC09  F005         	call	_init_clcd	;wreg free
   956                           
   957                           ;main.c: 17:     init_matrix_keypad();
   958   000D0C  ECB3  F006         	call	_init_matrix_keypad	;wreg free
   959   000D10                     
   960                           ;main.c: 18:     init_adc();
   961   000D10  EC97  F006         	call	_init_adc	;wreg free
   962   000D14                     
   963                           ;main.c: 21:     clcd_print("  TIME    EV  SP", (0x80 + (0)));
   964   000D14  0E12               	movlw	low STR_1
   965   000D16  6E03               	movwf	clcd_print@data^0,c
   966   000D18  0E80               	movlw	128
   967   000D1A  6E04               	movwf	clcd_print@addr^0,c
   968   000D1C  EC4A  F006         	call	_clcd_print	;wreg free
   969   000D20                     
   970                           ;main.c: 22:     clcd_print("00:00:00", (0xC0 + (0)));
   971   000D20  0E23               	movlw	low STR_2
   972   000D22  6E03               	movwf	clcd_print@data^0,c
   973   000D24  0EC0               	movlw	192
   974   000D26  6E04               	movwf	clcd_print@addr^0,c
   975   000D28  EC4A  F006         	call	_clcd_print	;wreg free
   976   000D2C  0012               	return		;funcret
   977   000D2E                     __end_of_init_config:
   978                           	callstack 0
   979                           
   980 ;; *************** function _init_matrix_keypad *****************
   981 ;; Defined at:
   982 ;;		line 5 in file "matrix_keypad.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;		None
   985 ;; Auto vars:     Size  Location     Type
   986 ;;		None
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg, status,2, status,0
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   996 ;;      Params:         0       0       0       0       0       0       0
   997 ;;      Locals:         0       0       0       0       0       0       0
   998 ;;      Temps:          0       0       0       0       0       0       0
   999 ;;      Totals:         0       0       0       0       0       0       0
  1000 ;;Total ram usage:        0 bytes
  1001 ;; Hardware stack levels used: 1
  1002 ;; This function calls:
  1003 ;;		Nothing
  1004 ;; This function is called by:
  1005 ;;		_init_config
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           	psect	text5
  1010   000D66                     __ptext5:
  1011                           	callstack 0
  1012   000D66                     _init_matrix_keypad:
  1013                           	callstack 29
  1014   000D66                     
  1015                           ;matrix_keypad.c: 8:  ADCON1 = 0x0F;
  1016   000D66  0E0F               	movlw	15
  1017   000D68  6EC1               	movwf	193,c	;volatile
  1018                           
  1019                           ;matrix_keypad.c: 11:  TRISB = 0x1E;
  1020   000D6A  0E1E               	movlw	30
  1021   000D6C  6E93               	movwf	147,c	;volatile
  1022   000D6E                     
  1023                           ;matrix_keypad.c: 14:  RBPU = 0;
  1024   000D6E  9EF1               	bcf	4081,7,c	;volatile
  1025   000D70                     
  1026                           ;matrix_keypad.c: 16:  PORTB = PORTB | 0xE0;
  1027   000D70  5081               	movf	129,w,c	;volatile
  1028   000D72  09E0               	iorlw	224
  1029   000D74  6E81               	movwf	129,c	;volatile
  1030   000D76  0012               	return		;funcret
  1031   000D78                     __end_of_init_matrix_keypad:
  1032                           	callstack 0
  1033                           
  1034 ;; *************** function _init_clcd *****************
  1035 ;; Defined at:
  1036 ;;		line 28 in file "clcd.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, status,2, status,0, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1050 ;;      Params:         0       0       0       0       0       0       0
  1051 ;;      Locals:         0       0       0       0       0       0       0
  1052 ;;      Temps:          1       0       0       0       0       0       0
  1053 ;;      Totals:         1       0       0       0       0       0       0
  1054 ;;Total ram usage:        1 bytes
  1055 ;; Hardware stack levels used: 1
  1056 ;; Hardware stack levels required when called: 1
  1057 ;; This function calls:
  1058 ;;		_clcd_write
  1059 ;; This function is called by:
  1060 ;;		_init_config
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text6
  1065   000A12                     __ptext6:
  1066                           	callstack 0
  1067   000A12                     _init_clcd:
  1068                           	callstack 28
  1069   000A12                     
  1070                           ;clcd.c: 31:  TRISD = 0x00;
  1071   000A12  0E00               	movlw	0
  1072   000A14  6E95               	movwf	149,c	;volatile
  1073   000A16                     
  1074                           ;clcd.c: 33:  TRISC = TRISC & 0xF8;
  1075   000A16  5094               	movf	148,w,c	;volatile
  1076   000A18  0BF8               	andlw	248
  1077   000A1A  6E94               	movwf	148,c	;volatile
  1078   000A1C                     
  1079                           ;clcd.c: 35:  RC0 = 0;
  1080   000A1C  9082               	bcf	3970,0,c	;volatile
  1081   000A1E                     
  1082                           ;clcd.c: 39:     _delay((unsigned long)((30)*(20000000/4000.0)));
  1083   000A1E  0EC3               	movlw	195
  1084   000A20  6E03               	movwf	??_init_clcd^0,c
  1085   000A22  0ECD               	movlw	205
  1086   000A24                     u847:
  1087   000A24  2EE8               	decfsz	wreg,f,c
  1088   000A26  D7FE               	bra	u847
  1089   000A28  2E03               	decfsz	??_init_clcd^0,f,c
  1090   000A2A  D7FC               	bra	u847
  1091   000A2C  0000               	nop	
  1092   000A2E                     
  1093                           ;clcd.c: 42:     clcd_write(0x33, 0 );
  1094   000A2E  0E00               	movlw	0
  1095   000A30  6E01               	movwf	clcd_write@control_bit^0,c
  1096   000A32  0E33               	movlw	51
  1097   000A34  EC67  F006         	call	_clcd_write
  1098   000A38                     
  1099                           ;clcd.c: 43:     _delay((unsigned long)((4100)*(20000000/4000000.0)));
  1100   000A38  0E1B               	movlw	27
  1101   000A3A  6E03               	movwf	??_init_clcd^0,c
  1102   000A3C  0E9E               	movlw	158
  1103   000A3E                     u857:
  1104   000A3E  2EE8               	decfsz	wreg,f,c
  1105   000A40  D7FE               	bra	u857
  1106   000A42  2E03               	decfsz	??_init_clcd^0,f,c
  1107   000A44  D7FC               	bra	u857
  1108   000A46  D000               	nop2	
  1109   000A48                     
  1110                           ;clcd.c: 44:     clcd_write(0x33, 0 );
  1111   000A48  0E00               	movlw	0
  1112   000A4A  6E01               	movwf	clcd_write@control_bit^0,c
  1113   000A4C  0E33               	movlw	51
  1114   000A4E  EC67  F006         	call	_clcd_write
  1115   000A52                     
  1116                           ;clcd.c: 45:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  1117   000A52  0EA6               	movlw	166
  1118   000A54                     u867:
  1119   000A54  2EE8               	decfsz	wreg,f,c
  1120   000A56  D7FE               	bra	u867
  1121   000A58  D000               	nop2	
  1122   000A5A                     
  1123                           ;clcd.c: 46:     clcd_write(0x33, 0 );
  1124   000A5A  0E00               	movlw	0
  1125   000A5C  6E01               	movwf	clcd_write@control_bit^0,c
  1126   000A5E  0E33               	movlw	51
  1127   000A60  EC67  F006         	call	_clcd_write
  1128   000A64                     
  1129                           ;clcd.c: 47:     _delay((unsigned long)((1)*(20000000/4000000.0)));
  1130   000A64  D000               	nop2		;2 cycle nop
  1131   000A66  D000               	nop2		;2 cycle nop
  1132   000A68  0000               	nop	
  1133   000A6A                     
  1134                           ;clcd.c: 49:     clcd_write(0x02, 0);
  1135   000A6A  0E00               	movlw	0
  1136   000A6C  6E01               	movwf	clcd_write@control_bit^0,c
  1137   000A6E  0E02               	movlw	2
  1138   000A70  EC67  F006         	call	_clcd_write
  1139   000A74                     
  1140                           ;clcd.c: 50:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  1141   000A74  0EA6               	movlw	166
  1142   000A76                     u877:
  1143   000A76  2EE8               	decfsz	wreg,f,c
  1144   000A78  D7FE               	bra	u877
  1145   000A7A  D000               	nop2	
  1146   000A7C                     
  1147                           ;clcd.c: 51:     clcd_write(0x38, 0);
  1148   000A7C  0E00               	movlw	0
  1149   000A7E  6E01               	movwf	clcd_write@control_bit^0,c
  1150   000A80  0E38               	movlw	56
  1151   000A82  EC67  F006         	call	_clcd_write
  1152   000A86                     
  1153                           ;clcd.c: 52:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  1154   000A86  0EA6               	movlw	166
  1155   000A88                     u887:
  1156   000A88  2EE8               	decfsz	wreg,f,c
  1157   000A8A  D7FE               	bra	u887
  1158   000A8C  D000               	nop2	
  1159   000A8E                     
  1160                           ;clcd.c: 53:     clcd_write(0x01, 0);
  1161   000A8E  0E00               	movlw	0
  1162   000A90  6E01               	movwf	clcd_write@control_bit^0,c
  1163   000A92  0E01               	movlw	1
  1164   000A94  EC67  F006         	call	_clcd_write
  1165   000A98                     
  1166                           ;clcd.c: 54:     _delay((unsigned long)((500)*(20000000/4000000.0)));
  1167   000A98  0E04               	movlw	4
  1168   000A9A  6E03               	movwf	??_init_clcd^0,c
  1169   000A9C  0E3E               	movlw	62
  1170   000A9E                     u897:
  1171   000A9E  2EE8               	decfsz	wreg,f,c
  1172   000AA0  D7FE               	bra	u897
  1173   000AA2  2E03               	decfsz	??_init_clcd^0,f,c
  1174   000AA4  D7FC               	bra	u897
  1175   000AA6                     
  1176                           ;clcd.c: 55:     clcd_write(0x0C, 0);
  1177   000AA6  0E00               	movlw	0
  1178   000AA8  6E01               	movwf	clcd_write@control_bit^0,c
  1179   000AAA  0E0C               	movlw	12
  1180   000AAC  EC67  F006         	call	_clcd_write
  1181   000AB0                     
  1182                           ;clcd.c: 56:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  1183   000AB0  0EA6               	movlw	166
  1184   000AB2                     u907:
  1185   000AB2  2EE8               	decfsz	wreg,f,c
  1186   000AB4  D7FE               	bra	u907
  1187   000AB6  D000               	nop2	
  1188   000AB8  0012               	return		;funcret
  1189   000ABA                     __end_of_init_clcd:
  1190                           	callstack 0
  1191                           
  1192 ;; *************** function _init_adc *****************
  1193 ;; Defined at:
  1194 ;;		line 4 in file "adc.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;		None
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;		None
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  1    wreg      void 
  1201 ;; Registers used:
  1202 ;;		wreg, status,2
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1208 ;;      Params:         0       0       0       0       0       0       0
  1209 ;;      Locals:         0       0       0       0       0       0       0
  1210 ;;      Temps:          0       0       0       0       0       0       0
  1211 ;;      Totals:         0       0       0       0       0       0       0
  1212 ;;Total ram usage:        0 bytes
  1213 ;; Hardware stack levels used: 1
  1214 ;; This function calls:
  1215 ;;		Nothing
  1216 ;; This function is called by:
  1217 ;;		_init_config
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           	psect	text7
  1222   000D2E                     __ptext7:
  1223                           	callstack 0
  1224   000D2E                     _init_adc:
  1225                           	callstack 29
  1226   000D2E                     
  1227                           ;adc.c: 7:  ADFM = 1;
  1228   000D2E  8EC0               	bsf	4032,7,c	;volatile
  1229                           
  1230                           ;adc.c: 13:  ACQT2 = 0;
  1231   000D30  9AC0               	bcf	4032,5,c	;volatile
  1232                           
  1233                           ;adc.c: 14:  ACQT1 = 1;
  1234   000D32  88C0               	bsf	4032,4,c	;volatile
  1235                           
  1236                           ;adc.c: 15:  ACQT0 = 0;
  1237   000D34  96C0               	bcf	4032,3,c	;volatile
  1238                           
  1239                           ;adc.c: 21:  ADCS0 = 0;
  1240   000D36  90C0               	bcf	4032,0,c	;volatile
  1241                           
  1242                           ;adc.c: 22:  ADCS1 = 1;
  1243   000D38  82C0               	bsf	4032,1,c	;volatile
  1244                           
  1245                           ;adc.c: 23:  ADCS2 = 0;
  1246   000D3A  94C0               	bcf	4032,2,c	;volatile
  1247                           
  1248                           ;adc.c: 26:  GODONE = 0;
  1249   000D3C  92C2               	bcf	4034,1,c	;volatile
  1250                           
  1251                           ;adc.c: 31:  VCFG1 = 0;
  1252   000D3E  9AC1               	bcf	4033,5,c	;volatile
  1253                           
  1254                           ;adc.c: 33:  VCFG0 = 0;
  1255   000D40  98C1               	bcf	4033,4,c	;volatile
  1256   000D42                     
  1257                           ;adc.c: 36:  ADRESH = 0;
  1258   000D42  0E00               	movlw	0
  1259   000D44  6EC4               	movwf	196,c	;volatile
  1260                           
  1261                           ;adc.c: 37:  ADRESL = 0;
  1262   000D46  0E00               	movlw	0
  1263   000D48  6EC3               	movwf	195,c	;volatile
  1264   000D4A                     
  1265                           ;adc.c: 40:  ADON = 1;
  1266   000D4A  80C2               	bsf	4034,0,c	;volatile
  1267   000D4C  0012               	return		;funcret
  1268   000D4E                     __end_of_init_adc:
  1269                           	callstack 0
  1270                           
  1271 ;; *************** function _dashboard *****************
  1272 ;; Defined at:
  1273 ;;		line 19 in file "dashboard.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;		None
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;  events          8   10[COMRAM] PTR unsigned char [8]
  1278 ;;		 -> STR_10(3), STR_9(3), STR_8(3), STR_7(3), 
  1279 ;;		 -> STR_6(3), STR_5(3), STR_4(3), STR_3(3), 
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1284 ;; Tracked objects:
  1285 ;;		On entry : 0/0
  1286 ;;		On exit  : 0/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1289 ;;      Params:         0       0       0       0       0       0       0
  1290 ;;      Locals:         8       0       0       0       0       0       0
  1291 ;;      Temps:          0       0       0       0       0       0       0
  1292 ;;      Totals:         8       0       0       0       0       0       0
  1293 ;;Total ram usage:        8 bytes
  1294 ;; Hardware stack levels used: 1
  1295 ;; Hardware stack levels required when called: 2
  1296 ;; This function calls:
  1297 ;;		___awdiv
  1298 ;;		___awmod
  1299 ;;		_clcd_print
  1300 ;;		_clcd_putch
  1301 ;;		_read_adc
  1302 ;; This function is called by:
  1303 ;;		_main
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text8
  1308   000646                     __ptext8:
  1309                           	callstack 0
  1310   000646                     _dashboard:
  1311                           	callstack 28
  1312   000646                     
  1313                           ;dashboard.c: 21:     char *events[8] = {"ON", "GR", "GN", "G1", "G2", "G3", "G4", "C "}
      +                          ;
  1314   000646  EE20  F015         	lfsr	2,dashboard@F10484
  1315   00064A  EE10  F00B         	lfsr	1,dashboard@events
  1316   00064E  0E07               	movlw	7
  1317   000650                     u691:
  1318   000650  CFDB FFE3          	movff	plusw2,plusw1
  1319   000654  06E8               	decf	wreg,f,c
  1320   000656  E2FC               	bc	u691
  1321   000658                     
  1322                           ;dashboard.c: 25:     clcd_print(events[i], (0xC0 + (10)));
  1323   000658  5022               	movf	_i^0,w,c
  1324   00065A  0F0B               	addlw	low dashboard@events
  1325   00065C  6ED9               	movwf	fsr2l,c
  1326   00065E  6ADA               	clrf	fsr2h,c
  1327   000660  50DF               	movf	indf2,w,c
  1328   000662  6E03               	movwf	clcd_print@data^0,c
  1329   000664  0ECA               	movlw	202
  1330   000666  6E04               	movwf	clcd_print@addr^0,c
  1331   000668  EC4A  F006         	call	_clcd_print	;wreg free
  1332   00066C                     
  1333                           ;dashboard.c: 28:     if (key == 2) {
  1334   00066C  0E02               	movlw	2
  1335   00066E  1827               	xorwf	_key^0,w,c
  1336   000670  A4D8               	btfss	status,2,c
  1337   000672  EF3D  F003         	goto	u701
  1338   000676  EF3F  F003         	goto	u700
  1339   00067A                     u701:
  1340   00067A  EF4F  F003         	goto	l1412
  1341   00067E                     u700:
  1342   00067E                     
  1343                           ;dashboard.c: 29:         if (i < 6) {
  1344   00067E  BE23               	btfsc	(_i+1)^0,7,c
  1345   000680  EF4D  F003         	goto	u710
  1346   000684  5023               	movf	(_i+1)^0,w,c
  1347   000686  E107               	bnz	u711
  1348   000688  0E06               	movlw	6
  1349   00068A  5C22               	subwf	_i^0,w,c
  1350   00068C  B0D8               	btfsc	status,0,c
  1351   00068E  EF4B  F003         	goto	u711
  1352   000692  EF4D  F003         	goto	u710
  1353   000696                     u711:
  1354   000696  EF4F  F003         	goto	l1412
  1355   00069A                     u710:
  1356   00069A                     
  1357                           ;dashboard.c: 30:             i++;
  1358   00069A  4A22               	infsnz	_i^0,f,c
  1359   00069C  2A23               	incf	(_i+1)^0,f,c
  1360   00069E                     l1412:
  1361                           
  1362                           ;dashboard.c: 34:     if (key == 3) {
  1363   00069E  0E03               	movlw	3
  1364   0006A0  1827               	xorwf	_key^0,w,c
  1365   0006A2  A4D8               	btfss	status,2,c
  1366   0006A4  EF56  F003         	goto	u721
  1367   0006A8  EF58  F003         	goto	u720
  1368   0006AC                     u721:
  1369   0006AC  EF69  F003         	goto	l1418
  1370   0006B0                     u720:
  1371   0006B0                     
  1372                           ;dashboard.c: 35:         if (i > 1) {
  1373   0006B0  BE23               	btfsc	(_i+1)^0,7,c
  1374   0006B2  EF64  F003         	goto	u731
  1375   0006B6  5023               	movf	(_i+1)^0,w,c
  1376   0006B8  E109               	bnz	u730
  1377   0006BA  0E02               	movlw	2
  1378   0006BC  5C22               	subwf	_i^0,w,c
  1379   0006BE  A0D8               	btfss	status,0,c
  1380   0006C0  EF64  F003         	goto	u731
  1381   0006C4  EF66  F003         	goto	u730
  1382   0006C8                     u731:
  1383   0006C8  EF69  F003         	goto	l1418
  1384   0006CC                     u730:
  1385   0006CC                     
  1386                           ;dashboard.c: 36:             i--;
  1387   0006CC  0622               	decf	_i^0,f,c
  1388   0006CE  A0D8               	btfss	status,0,c
  1389   0006D0  0623               	decf	(_i+1)^0,f,c
  1390   0006D2                     l1418:
  1391                           
  1392                           ;dashboard.c: 40:     if (key == 1) {
  1393   0006D2  0427               	decf	_key^0,w,c
  1394   0006D4  A4D8               	btfss	status,2,c
  1395   0006D6  EF6F  F003         	goto	u741
  1396   0006DA  EF71  F003         	goto	u740
  1397   0006DE                     u741:
  1398   0006DE  EF75  F003         	goto	l1422
  1399   0006E2                     u740:
  1400   0006E2                     
  1401                           ;dashboard.c: 41:         i = 7;
  1402   0006E2  0E00               	movlw	0
  1403   0006E4  6E23               	movwf	(_i+1)^0,c
  1404   0006E6  0E07               	movlw	7
  1405   0006E8  6E22               	movwf	_i^0,c
  1406   0006EA                     l1422:
  1407                           
  1408                           ;dashboard.c: 44:     if (i == 7 && (key == 2 || key == 3)) {
  1409   0006EA  0E07               	movlw	7
  1410   0006EC  1822               	xorwf	_i^0,w,c
  1411   0006EE  1023               	iorwf	(_i+1)^0,w,c
  1412   0006F0  A4D8               	btfss	status,2,c
  1413   0006F2  EF7D  F003         	goto	u751
  1414   0006F6  EF7F  F003         	goto	u750
  1415   0006FA                     u751:
  1416   0006FA  EF95  F003         	goto	l1430
  1417   0006FE                     u750:
  1418   0006FE  0E02               	movlw	2
  1419   000700  1827               	xorwf	_key^0,w,c
  1420   000702  B4D8               	btfsc	status,2,c
  1421   000704  EF86  F003         	goto	u761
  1422   000708  EF88  F003         	goto	u760
  1423   00070C                     u761:
  1424   00070C  EF91  F003         	goto	l1428
  1425   000710                     u760:
  1426   000710  0E03               	movlw	3
  1427   000712  1827               	xorwf	_key^0,w,c
  1428   000714  A4D8               	btfss	status,2,c
  1429   000716  EF8F  F003         	goto	u771
  1430   00071A  EF91  F003         	goto	u770
  1431   00071E                     u771:
  1432   00071E  EF95  F003         	goto	l1430
  1433   000722                     u770:
  1434   000722                     l1428:
  1435                           
  1436                           ;dashboard.c: 45:         i = 2;
  1437   000722  0E00               	movlw	0
  1438   000724  6E23               	movwf	(_i+1)^0,c
  1439   000726  0E02               	movlw	2
  1440   000728  6E22               	movwf	_i^0,c
  1441   00072A                     l1430:
  1442                           
  1443                           ;dashboard.c: 50:     adc_reg_val = read_adc(0x04);
  1444   00072A  0E04               	movlw	4
  1445   00072C  EC0A  F006         	call	_read_adc
  1446   000730  C001  F024         	movff	?_read_adc,_adc_reg_val
  1447   000734  C002  F025         	movff	?_read_adc+1,_adc_reg_val+1
  1448   000738                     
  1449                           ;dashboard.c: 51:     if (adc_reg_val < 100)
  1450   000738  BE25               	btfsc	(_adc_reg_val+1)^0,7,c
  1451   00073A  EFAA  F003         	goto	u780
  1452   00073E  5025               	movf	(_adc_reg_val+1)^0,w,c
  1453   000740  E107               	bnz	u781
  1454   000742  0E64               	movlw	100
  1455   000744  5C24               	subwf	_adc_reg_val^0,w,c
  1456   000746  B0D8               	btfsc	status,0,c
  1457   000748  EFA8  F003         	goto	u781
  1458   00074C  EFAA  F003         	goto	u780
  1459   000750                     u781:
  1460   000750  EFCA  F003         	goto	l182
  1461   000754                     u780:
  1462   000754                     
  1463                           ;dashboard.c: 52:     {;dashboard.c: 53:         clcd_putch(((adc_reg_val / 10) + 48), (
      +                          0xC0 + (14)));
  1464   000754  0ECE               	movlw	206
  1465   000756  6E09               	movwf	clcd_putch@addr^0,c
  1466   000758  C024  F001         	movff	_adc_reg_val,___awdiv@dividend
  1467   00075C  C025  F002         	movff	_adc_reg_val+1,___awdiv@dividend+1
  1468   000760  0E00               	movlw	0
  1469   000762  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1470   000764  0E0A               	movlw	10
  1471   000766  6E03               	movwf	___awdiv@divisor^0,c
  1472   000768  EC4F  F004         	call	___awdiv	;wreg free
  1473   00076C  5001               	movf	?___awdiv^0,w,c
  1474   00076E  0F30               	addlw	48
  1475   000770  ECA7  F006         	call	_clcd_putch
  1476                           
  1477                           ;dashboard.c: 54:         clcd_putch(((adc_reg_val % 10) + 48), (0xC0 + (15)));
  1478   000774  0ECF               	movlw	207
  1479   000776  6E09               	movwf	clcd_putch@addr^0,c
  1480   000778  C024  F001         	movff	_adc_reg_val,___awmod@dividend
  1481   00077C  C025  F002         	movff	_adc_reg_val+1,___awmod@dividend+1
  1482   000780  0E00               	movlw	0
  1483   000782  6E04               	movwf	(___awmod@divisor+1)^0,c
  1484   000784  0E0A               	movlw	10
  1485   000786  6E03               	movwf	___awmod@divisor^0,c
  1486   000788  ECB1  F004         	call	___awmod	;wreg free
  1487   00078C  5001               	movf	?___awmod^0,w,c
  1488   00078E  0F30               	addlw	48
  1489   000790  ECA7  F006         	call	_clcd_putch
  1490   000794                     l182:
  1491   000794  0012               	return		;funcret
  1492   000796                     __end_of_dashboard:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function _read_adc *****************
  1496 ;; Defined at:
  1497 ;;		line 43 in file "adc.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;  channel         1    wreg     unsigned char 
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  channel         1    6[COMRAM] unsigned char 
  1502 ;;  reg_val         2    4[COMRAM] unsigned short 
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  2    0[COMRAM] unsigned short 
  1505 ;; Registers used:
  1506 ;;		wreg, status,2, status,0
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1512 ;;      Params:         2       0       0       0       0       0       0
  1513 ;;      Locals:         3       0       0       0       0       0       0
  1514 ;;      Temps:          2       0       0       0       0       0       0
  1515 ;;      Totals:         7       0       0       0       0       0       0
  1516 ;;Total ram usage:        7 bytes
  1517 ;; Hardware stack levels used: 1
  1518 ;; This function calls:
  1519 ;;		Nothing
  1520 ;; This function is called by:
  1521 ;;		_dashboard
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text9
  1526   000C14                     __ptext9:
  1527                           	callstack 0
  1528   000C14                     _read_adc:
  1529                           	callstack 29
  1530                           
  1531                           ;incstack = 0
  1532                           ;read_adc@channel stored from wreg
  1533   000C14  6E07               	movwf	read_adc@channel^0,c
  1534   000C16                     
  1535                           ;adc.c: 43: unsigned short read_adc(unsigned char channel);adc.c: 44: {;adc.c: 45:  unsi
      +                          gned short reg_val;;adc.c: 48:  ADCON0 = (ADCON0 & 0xC3) | (channel << 2);
  1536   000C16  C007  F003         	movff	read_adc@channel,??_read_adc
  1537   000C1A  90D8               	bcf	status,0,c
  1538   000C1C  3603               	rlcf	??_read_adc^0,f,c
  1539   000C1E  90D8               	bcf	status,0,c
  1540   000C20  3603               	rlcf	??_read_adc^0,f,c
  1541   000C22  50C2               	movf	194,w,c	;volatile
  1542   000C24  0BC3               	andlw	195
  1543   000C26  1003               	iorwf	??_read_adc^0,w,c
  1544   000C28  6EC2               	movwf	194,c	;volatile
  1545   000C2A                     
  1546                           ;adc.c: 51:  GO = 1;
  1547   000C2A  82C2               	bsf	4034,1,c	;volatile
  1548   000C2C                     l36:
  1549   000C2C  B2C2               	btfsc	4034,1,c	;volatile
  1550   000C2E  EF1B  F006         	goto	u551
  1551   000C32  EF1D  F006         	goto	u550
  1552   000C36                     u551:
  1553   000C36  EF16  F006         	goto	l36
  1554   000C3A                     u550:
  1555   000C3A                     
  1556                           ;adc.c: 53:  reg_val = (ADRESH << 8) | ADRESL;
  1557   000C3A  50C3               	movf	195,w,c	;volatile
  1558   000C3C  CFC4 F003          	movff	4036,??_read_adc	;volatile
  1559   000C40  6A04               	clrf	(??_read_adc+1)^0,c
  1560   000C42  C003  F004         	movff	??_read_adc,??_read_adc+1
  1561   000C46  6A03               	clrf	??_read_adc^0,c
  1562   000C48  1003               	iorwf	??_read_adc^0,w,c
  1563   000C4A  6E05               	movwf	read_adc@reg_val^0,c
  1564   000C4C  5004               	movf	(??_read_adc+1)^0,w,c
  1565   000C4E  6E06               	movwf	(read_adc@reg_val+1)^0,c
  1566   000C50                     
  1567                           ;adc.c: 55:  return reg_val;
  1568   000C50  C005  F001         	movff	read_adc@reg_val,?_read_adc
  1569   000C54  C006  F002         	movff	read_adc@reg_val+1,?_read_adc+1
  1570   000C58  0012               	return		;funcret
  1571   000C5A                     __end_of_read_adc:
  1572                           	callstack 0
  1573                           
  1574 ;; *************** function _clcd_putch *****************
  1575 ;; Defined at:
  1576 ;;		line 68 in file "clcd.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;  data            1    wreg     const unsigned char 
  1579 ;;  addr            1    8[COMRAM] unsigned char 
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;  data            1    9[COMRAM] const unsigned char 
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  1    wreg      void 
  1584 ;; Registers used:
  1585 ;;		wreg, status,2, cstack
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1591 ;;      Params:         1       0       0       0       0       0       0
  1592 ;;      Locals:         1       0       0       0       0       0       0
  1593 ;;      Temps:          0       0       0       0       0       0       0
  1594 ;;      Totals:         2       0       0       0       0       0       0
  1595 ;;Total ram usage:        2 bytes
  1596 ;; Hardware stack levels used: 1
  1597 ;; Hardware stack levels required when called: 1
  1598 ;; This function calls:
  1599 ;;		_clcd_write
  1600 ;; This function is called by:
  1601 ;;		_dashboard
  1602 ;;		_password
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           	psect	text10
  1607   000D4E                     __ptext10:
  1608                           	callstack 0
  1609   000D4E                     _clcd_putch:
  1610                           	callstack 28
  1611                           
  1612                           ;incstack = 0
  1613                           ;clcd_putch@data stored from wreg
  1614   000D4E  6E0A               	movwf	clcd_putch@data^0,c
  1615   000D50                     
  1616                           ;clcd.c: 68: void clcd_putch(const unsigned char data, unsigned char addr);clcd.c: 69: {
      +                          ;clcd.c: 70:  clcd_write(addr, 0);
  1617   000D50  0E00               	movlw	0
  1618   000D52  6E01               	movwf	clcd_write@control_bit^0,c
  1619   000D54  5009               	movf	clcd_putch@addr^0,w,c
  1620   000D56  EC67  F006         	call	_clcd_write
  1621                           
  1622                           ;clcd.c: 71:  clcd_write(data, 1);
  1623   000D5A  0E01               	movlw	1
  1624   000D5C  6E01               	movwf	clcd_write@control_bit^0,c
  1625   000D5E  500A               	movf	clcd_putch@data^0,w,c
  1626   000D60  EC67  F006         	call	_clcd_write
  1627   000D64  0012               	return		;funcret
  1628   000D66                     __end_of_clcd_putch:
  1629                           	callstack 0
  1630                           
  1631 ;; *************** function _clcd_print *****************
  1632 ;; Defined at:
  1633 ;;		line 59 in file "clcd.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;  data            1    2[COMRAM] PTR const unsigned char 
  1636 ;;		 -> STR_11(17), STR_10(3), STR_9(3), STR_8(3), 
  1637 ;;		 -> STR_7(3), STR_6(3), STR_5(3), STR_4(3), 
  1638 ;;		 -> STR_3(3), STR_2(9), STR_1(17), 
  1639 ;;  addr            1    3[COMRAM] unsigned char 
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;		None
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      void 
  1644 ;; Registers used:
  1645 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1651 ;;      Params:         2       0       0       0       0       0       0
  1652 ;;      Locals:         0       0       0       0       0       0       0
  1653 ;;      Temps:          0       0       0       0       0       0       0
  1654 ;;      Totals:         2       0       0       0       0       0       0
  1655 ;;Total ram usage:        2 bytes
  1656 ;; Hardware stack levels used: 1
  1657 ;; Hardware stack levels required when called: 1
  1658 ;; This function calls:
  1659 ;;		_clcd_write
  1660 ;; This function is called by:
  1661 ;;		_init_config
  1662 ;;		_dashboard
  1663 ;;		_password
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           	psect	text11
  1668   000C94                     __ptext11:
  1669                           	callstack 0
  1670   000C94                     _clcd_print:
  1671                           	callstack 28
  1672   000C94                     
  1673                           ;clcd.c: 59: void clcd_print(const unsigned char *data, unsigned char addr);clcd.c: 60: 
      +                          {;clcd.c: 61:  clcd_write(addr, 0);
  1674   000C94  0E00               	movlw	0
  1675   000C96  6E01               	movwf	clcd_write@control_bit^0,c
  1676   000C98  5004               	movf	clcd_print@addr^0,w,c
  1677   000C9A  EC67  F006         	call	_clcd_write
  1678                           
  1679                           ;clcd.c: 62:  while (*data != '\0')
  1680   000C9E  EF5A  F006         	goto	l1310
  1681   000CA2                     l1306:
  1682                           
  1683                           ;clcd.c: 63:  {;clcd.c: 64:   clcd_write(*data++, 1);
  1684   000CA2  0E01               	movlw	1
  1685   000CA4  6E01               	movwf	clcd_write@control_bit^0,c
  1686   000CA6  C003  FFF6         	movff	clcd_print@data,tblptrl
  1687   000CAA                     	if	0	;There is only one active tblptr byte
  1688   000CAA                     	endif
  1689   000CAA                     	if	0	;tblptru may be non-zero
  1690   000CAA                     	endif
  1691   000CAA                     	if	0	;tblptru may be non-zero
  1692   000CAA                     	endif
  1693   000CAA  0008               	tblrd		*
  1694   000CAC  50F5               	movf	tablat,w,c
  1695   000CAE  EC67  F006         	call	_clcd_write
  1696   000CB2  2A03               	incf	clcd_print@data^0,f,c
  1697   000CB4                     l1310:
  1698                           
  1699                           ;clcd.c: 62:  while (*data != '\0')
  1700   000CB4  C003  FFF6         	movff	clcd_print@data,tblptrl
  1701   000CB8                     	if	0	;There is only one active tblptr byte
  1702   000CB8                     	endif
  1703   000CB8                     	if	0	;tblptru may be non-zero
  1704   000CB8                     	endif
  1705   000CB8                     	if	0	;tblptru may be non-zero
  1706   000CB8                     	endif
  1707   000CB8  0008               	tblrd		*
  1708   000CBA  50F5               	movf	tablat,w,c
  1709   000CBC  0900               	iorlw	0
  1710   000CBE  A4D8               	btfss	status,2,c
  1711   000CC0  EF64  F006         	goto	u561
  1712   000CC4  EF66  F006         	goto	u560
  1713   000CC8                     u561:
  1714   000CC8  EF51  F006         	goto	l1306
  1715   000CCC                     u560:
  1716   000CCC  0012               	return		;funcret
  1717   000CCE                     __end_of_clcd_print:
  1718                           	callstack 0
  1719                           
  1720 ;; *************** function _clcd_write *****************
  1721 ;; Defined at:
  1722 ;;		line 5 in file "clcd.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  byte            1    wreg     unsigned char 
  1725 ;;  control_bit     1    0[COMRAM] unsigned char 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  byte            1    1[COMRAM] unsigned char 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1737 ;;      Params:         1       0       0       0       0       0       0
  1738 ;;      Locals:         1       0       0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0
  1740 ;;      Totals:         2       0       0       0       0       0       0
  1741 ;;Total ram usage:        2 bytes
  1742 ;; Hardware stack levels used: 1
  1743 ;; This function calls:
  1744 ;;		Nothing
  1745 ;; This function is called by:
  1746 ;;		_init_clcd
  1747 ;;		_clcd_print
  1748 ;;		_clcd_putch
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text12
  1753   000CCE                     __ptext12:
  1754                           	callstack 0
  1755   000CCE                     _clcd_write:
  1756                           	callstack 28
  1757                           
  1758                           ;incstack = 0
  1759                           ;clcd_write@byte stored from wreg
  1760   000CCE  6E02               	movwf	clcd_write@byte^0,c
  1761   000CD0                     
  1762                           ;clcd.c: 5: void clcd_write(unsigned char byte, unsigned char control_bit);clcd.c: 6: {;
      +                          clcd.c: 7:  RC1 = control_bit;
  1763   000CD0  B001               	btfsc	clcd_write@control_bit^0,0,c
  1764   000CD2  EF6D  F006         	goto	u521
  1765   000CD6  EF70  F006         	goto	u520
  1766   000CDA                     u521:
  1767   000CDA  8282               	bsf	3970,1,c	;volatile
  1768   000CDC  EF71  F006         	goto	u535
  1769   000CE0                     u520:
  1770   000CE0  9282               	bcf	3970,1,c	;volatile
  1771   000CE2                     u535:
  1772   000CE2                     
  1773                           ;clcd.c: 8:  PORTD = byte;
  1774   000CE2  C002  FF83         	movff	clcd_write@byte,3971	;volatile
  1775   000CE6                     
  1776                           ;clcd.c: 11:  RC2 = 1;
  1777   000CE6  8482               	bsf	3970,2,c	;volatile
  1778   000CE8                     
  1779                           ;clcd.c: 12:  RC2 = 0;
  1780   000CE8  9482               	bcf	3970,2,c	;volatile
  1781   000CEA                     
  1782                           ;clcd.c: 14:  TRISD7 = 0xFF;
  1783   000CEA  8E95               	bsf	3989,7,c	;volatile
  1784   000CEC                     
  1785                           ;clcd.c: 15:  RC0 = 1;
  1786   000CEC  8082               	bsf	3970,0,c	;volatile
  1787   000CEE                     
  1788                           ;clcd.c: 16:  RC1 = 0;
  1789   000CEE  9282               	bcf	3970,1,c	;volatile
  1790   000CF0                     l1252:
  1791                           
  1792                           ;clcd.c: 19:  {;clcd.c: 20:   RC2 = 1;
  1793   000CF0  8482               	bsf	3970,2,c	;volatile
  1794   000CF2                     
  1795                           ;clcd.c: 21:   RC2 = 0;
  1796   000CF2  9482               	bcf	3970,2,c	;volatile
  1797   000CF4                     
  1798                           ;clcd.c: 22:  } while (RD7);
  1799   000CF4  BE83               	btfsc	3971,7,c	;volatile
  1800   000CF6  EF7F  F006         	goto	u541
  1801   000CFA  EF81  F006         	goto	u540
  1802   000CFE                     u541:
  1803   000CFE  EF78  F006         	goto	l1252
  1804   000D02                     u540:
  1805   000D02                     
  1806                           ;clcd.c: 24:  RC0 = 0;
  1807   000D02  9082               	bcf	3970,0,c	;volatile
  1808                           
  1809                           ;clcd.c: 25:  TRISD7 = 0x00;
  1810   000D04  9E95               	bcf	3989,7,c	;volatile
  1811   000D06  0012               	return		;funcret
  1812   000D08                     __end_of_clcd_write:
  1813                           	callstack 0
  1814                           
  1815 ;; *************** function ___awmod *****************
  1816 ;; Defined at:
  1817 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;  dividend        2    0[COMRAM] int 
  1820 ;;  divisor         2    2[COMRAM] int 
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;  sign            1    5[COMRAM] unsigned char 
  1823 ;;  counter         1    4[COMRAM] unsigned char 
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  2    0[COMRAM] int 
  1826 ;; Registers used:
  1827 ;;		wreg, status,2, status,0
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1833 ;;      Params:         4       0       0       0       0       0       0
  1834 ;;      Locals:         2       0       0       0       0       0       0
  1835 ;;      Temps:          0       0       0       0       0       0       0
  1836 ;;      Totals:         6       0       0       0       0       0       0
  1837 ;;Total ram usage:        6 bytes
  1838 ;; Hardware stack levels used: 1
  1839 ;; This function calls:
  1840 ;;		Nothing
  1841 ;; This function is called by:
  1842 ;;		_dashboard
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text13
  1847   000962                     __ptext13:
  1848                           	callstack 0
  1849   000962                     ___awmod:
  1850                           	callstack 29
  1851   000962  0E00               	movlw	0
  1852   000964  6E06               	movwf	___awmod@sign^0,c
  1853   000966  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  1854   000968  EFBA  F004         	goto	u630
  1855   00096C  EFB8  F004         	goto	u631
  1856   000970                     u631:
  1857   000970  EFC0  F004         	goto	l1366
  1858   000974                     u630:
  1859   000974  6C01               	negf	___awmod@dividend^0,c
  1860   000976  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1861   000978  B0D8               	btfsc	status,0,c
  1862   00097A  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1863   00097C  0E01               	movlw	1
  1864   00097E  6E06               	movwf	___awmod@sign^0,c
  1865   000980                     l1366:
  1866   000980  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  1867   000982  EFC7  F004         	goto	u640
  1868   000986  EFC5  F004         	goto	u641
  1869   00098A                     u641:
  1870   00098A  EFCB  F004         	goto	l1370
  1871   00098E                     u640:
  1872   00098E  6C03               	negf	___awmod@divisor^0,c
  1873   000990  1E04               	comf	(___awmod@divisor+1)^0,f,c
  1874   000992  B0D8               	btfsc	status,0,c
  1875   000994  2A04               	incf	(___awmod@divisor+1)^0,f,c
  1876   000996                     l1370:
  1877   000996  5003               	movf	___awmod@divisor^0,w,c
  1878   000998  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  1879   00099A  B4D8               	btfsc	status,2,c
  1880   00099C  EFD2  F004         	goto	u651
  1881   0009A0  EFD4  F004         	goto	u650
  1882   0009A4                     u651:
  1883   0009A4  EFF8  F004         	goto	l1386
  1884   0009A8                     u650:
  1885   0009A8  0E01               	movlw	1
  1886   0009AA  6E05               	movwf	___awmod@counter^0,c
  1887   0009AC  EFDC  F004         	goto	l1376
  1888   0009B0                     l1374:
  1889   0009B0  90D8               	bcf	status,0,c
  1890   0009B2  3603               	rlcf	___awmod@divisor^0,f,c
  1891   0009B4  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  1892   0009B6  2A05               	incf	___awmod@counter^0,f,c
  1893   0009B8                     l1376:
  1894   0009B8  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  1895   0009BA  EFE1  F004         	goto	u661
  1896   0009BE  EFE3  F004         	goto	u660
  1897   0009C2                     u661:
  1898   0009C2  EFD8  F004         	goto	l1374
  1899   0009C6                     u660:
  1900   0009C6                     l1378:
  1901   0009C6  5003               	movf	___awmod@divisor^0,w,c
  1902   0009C8  5C01               	subwf	___awmod@dividend^0,w,c
  1903   0009CA  5004               	movf	(___awmod@divisor+1)^0,w,c
  1904   0009CC  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  1905   0009CE  A0D8               	btfss	status,0,c
  1906   0009D0  EFEC  F004         	goto	u671
  1907   0009D4  EFEE  F004         	goto	u670
  1908   0009D8                     u671:
  1909   0009D8  EFF2  F004         	goto	l1382
  1910   0009DC                     u670:
  1911   0009DC  5003               	movf	___awmod@divisor^0,w,c
  1912   0009DE  5E01               	subwf	___awmod@dividend^0,f,c
  1913   0009E0  5004               	movf	(___awmod@divisor+1)^0,w,c
  1914   0009E2  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  1915   0009E4                     l1382:
  1916   0009E4  90D8               	bcf	status,0,c
  1917   0009E6  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  1918   0009E8  3203               	rrcf	___awmod@divisor^0,f,c
  1919   0009EA  2E05               	decfsz	___awmod@counter^0,f,c
  1920   0009EC  EFE3  F004         	goto	l1378
  1921   0009F0                     l1386:
  1922   0009F0  5006               	movf	___awmod@sign^0,w,c
  1923   0009F2  B4D8               	btfsc	status,2,c
  1924   0009F4  EFFE  F004         	goto	u681
  1925   0009F8  EF00  F005         	goto	u680
  1926   0009FC                     u681:
  1927   0009FC  EF04  F005         	goto	l1390
  1928   000A00                     u680:
  1929   000A00  6C01               	negf	___awmod@dividend^0,c
  1930   000A02  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1931   000A04  B0D8               	btfsc	status,0,c
  1932   000A06  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1933   000A08                     l1390:
  1934   000A08  C001  F001         	movff	___awmod@dividend,?___awmod
  1935   000A0C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1936   000A10  0012               	return		;funcret
  1937   000A12                     __end_of___awmod:
  1938                           	callstack 0
  1939                           
  1940 ;; *************** function ___awdiv *****************
  1941 ;; Defined at:
  1942 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  dividend        2    0[COMRAM] int 
  1945 ;;  divisor         2    2[COMRAM] int 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  quotient        2    6[COMRAM] int 
  1948 ;;  sign            1    5[COMRAM] unsigned char 
  1949 ;;  counter         1    4[COMRAM] unsigned char 
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  2    0[COMRAM] int 
  1952 ;; Registers used:
  1953 ;;		wreg, status,2, status,0
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1959 ;;      Params:         4       0       0       0       0       0       0
  1960 ;;      Locals:         4       0       0       0       0       0       0
  1961 ;;      Temps:          0       0       0       0       0       0       0
  1962 ;;      Totals:         8       0       0       0       0       0       0
  1963 ;;Total ram usage:        8 bytes
  1964 ;; Hardware stack levels used: 1
  1965 ;; This function calls:
  1966 ;;		Nothing
  1967 ;; This function is called by:
  1968 ;;		_dashboard
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text14
  1973   00089E                     __ptext14:
  1974                           	callstack 0
  1975   00089E                     ___awdiv:
  1976                           	callstack 29
  1977   00089E  0E00               	movlw	0
  1978   0008A0  6E06               	movwf	___awdiv@sign^0,c
  1979   0008A2  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1980   0008A4  EF58  F004         	goto	u570
  1981   0008A8  EF56  F004         	goto	u571
  1982   0008AC                     u571:
  1983   0008AC  EF5E  F004         	goto	l1322
  1984   0008B0                     u570:
  1985   0008B0  6C03               	negf	___awdiv@divisor^0,c
  1986   0008B2  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1987   0008B4  B0D8               	btfsc	status,0,c
  1988   0008B6  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1989   0008B8  0E01               	movlw	1
  1990   0008BA  6E06               	movwf	___awdiv@sign^0,c
  1991   0008BC                     l1322:
  1992   0008BC  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1993   0008BE  EF65  F004         	goto	u580
  1994   0008C2  EF63  F004         	goto	u581
  1995   0008C6                     u581:
  1996   0008C6  EF6B  F004         	goto	l1328
  1997   0008CA                     u580:
  1998   0008CA  6C01               	negf	___awdiv@dividend^0,c
  1999   0008CC  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2000   0008CE  B0D8               	btfsc	status,0,c
  2001   0008D0  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2002   0008D2  0E01               	movlw	1
  2003   0008D4  1A06               	xorwf	___awdiv@sign^0,f,c
  2004   0008D6                     l1328:
  2005   0008D6  0E00               	movlw	0
  2006   0008D8  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2007   0008DA  0E00               	movlw	0
  2008   0008DC  6E07               	movwf	___awdiv@quotient^0,c
  2009   0008DE  5003               	movf	___awdiv@divisor^0,w,c
  2010   0008E0  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2011   0008E2  B4D8               	btfsc	status,2,c
  2012   0008E4  EF76  F004         	goto	u591
  2013   0008E8  EF78  F004         	goto	u590
  2014   0008EC                     u591:
  2015   0008EC  EFA0  F004         	goto	l1350
  2016   0008F0                     u590:
  2017   0008F0  0E01               	movlw	1
  2018   0008F2  6E05               	movwf	___awdiv@counter^0,c
  2019   0008F4  EF80  F004         	goto	l1336
  2020   0008F8                     l1334:
  2021   0008F8  90D8               	bcf	status,0,c
  2022   0008FA  3603               	rlcf	___awdiv@divisor^0,f,c
  2023   0008FC  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2024   0008FE  2A05               	incf	___awdiv@counter^0,f,c
  2025   000900                     l1336:
  2026   000900  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2027   000902  EF85  F004         	goto	u601
  2028   000906  EF87  F004         	goto	u600
  2029   00090A                     u601:
  2030   00090A  EF7C  F004         	goto	l1334
  2031   00090E                     u600:
  2032   00090E                     l1338:
  2033   00090E  90D8               	bcf	status,0,c
  2034   000910  3607               	rlcf	___awdiv@quotient^0,f,c
  2035   000912  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2036   000914  5003               	movf	___awdiv@divisor^0,w,c
  2037   000916  5C01               	subwf	___awdiv@dividend^0,w,c
  2038   000918  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2039   00091A  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2040   00091C  A0D8               	btfss	status,0,c
  2041   00091E  EF93  F004         	goto	u611
  2042   000922  EF95  F004         	goto	u610
  2043   000926                     u611:
  2044   000926  EF9A  F004         	goto	l1346
  2045   00092A                     u610:
  2046   00092A  5003               	movf	___awdiv@divisor^0,w,c
  2047   00092C  5E01               	subwf	___awdiv@dividend^0,f,c
  2048   00092E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2049   000930  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2050   000932  8007               	bsf	___awdiv@quotient^0,0,c
  2051   000934                     l1346:
  2052   000934  90D8               	bcf	status,0,c
  2053   000936  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2054   000938  3203               	rrcf	___awdiv@divisor^0,f,c
  2055   00093A  2E05               	decfsz	___awdiv@counter^0,f,c
  2056   00093C  EF87  F004         	goto	l1338
  2057   000940                     l1350:
  2058   000940  5006               	movf	___awdiv@sign^0,w,c
  2059   000942  B4D8               	btfsc	status,2,c
  2060   000944  EFA6  F004         	goto	u621
  2061   000948  EFA8  F004         	goto	u620
  2062   00094C                     u621:
  2063   00094C  EFAC  F004         	goto	l1354
  2064   000950                     u620:
  2065   000950  6C07               	negf	___awdiv@quotient^0,c
  2066   000952  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2067   000954  B0D8               	btfsc	status,0,c
  2068   000956  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2069   000958                     l1354:
  2070   000958  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2071   00095C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2072   000960  0012               	return		;funcret
  2073   000962                     __end_of___awdiv:
  2074                           	callstack 0
  2075                           
  2076                           	psect	rparam
  2077   000000                     
  2078                           	psect	idloc
  2079                           
  2080                           ;Config register IDLOC0 @ 0x200000
  2081                           ;	unspecified, using default values
  2082   200000                     	org	2097152
  2083   200000  FF                 	db	255
  2084                           
  2085                           ;Config register IDLOC1 @ 0x200001
  2086                           ;	unspecified, using default values
  2087   200001                     	org	2097153
  2088   200001  FF                 	db	255
  2089                           
  2090                           ;Config register IDLOC2 @ 0x200002
  2091                           ;	unspecified, using default values
  2092   200002                     	org	2097154
  2093   200002  FF                 	db	255
  2094                           
  2095                           ;Config register IDLOC3 @ 0x200003
  2096                           ;	unspecified, using default values
  2097   200003                     	org	2097155
  2098   200003  FF                 	db	255
  2099                           
  2100                           ;Config register IDLOC4 @ 0x200004
  2101                           ;	unspecified, using default values
  2102   200004                     	org	2097156
  2103   200004  FF                 	db	255
  2104                           
  2105                           ;Config register IDLOC5 @ 0x200005
  2106                           ;	unspecified, using default values
  2107   200005                     	org	2097157
  2108   200005  FF                 	db	255
  2109                           
  2110                           ;Config register IDLOC6 @ 0x200006
  2111                           ;	unspecified, using default values
  2112   200006                     	org	2097158
  2113   200006  FF                 	db	255
  2114                           
  2115                           ;Config register IDLOC7 @ 0x200007
  2116                           ;	unspecified, using default values
  2117   200007                     	org	2097159
  2118   200007  FF                 	db	255
  2119                           
  2120                           	psect	config
  2121                           
  2122                           ; Padding undefined space
  2123   300000                     	org	3145728
  2124   300000  FF                 	db	255
  2125                           
  2126                           ;Config register CONFIG1H @ 0x300001
  2127                           ;	unspecified, using default values
  2128                           ;	Oscillator Selection bits
  2129                           ;	OSC = 0x7, unprogrammed default
  2130                           ;	Fail-Safe Clock Monitor Enable bit
  2131                           ;	FCMEN = 0x0, unprogrammed default
  2132                           ;	Internal/External Oscillator Switchover bit
  2133                           ;	IESO = 0x0, unprogrammed default
  2134   300001                     	org	3145729
  2135   300001  07                 	db	7
  2136                           
  2137                           ;Config register CONFIG2L @ 0x300002
  2138                           ;	unspecified, using default values
  2139                           ;	Power-up Timer Enable bit
  2140                           ;	PWRT = 0x1, unprogrammed default
  2141                           ;	Brown-out Reset Enable bits
  2142                           ;	BOREN = 0x3, unprogrammed default
  2143                           ;	Brown-out Reset Voltage bits
  2144                           ;	BORV = 0x3, unprogrammed default
  2145   300002                     	org	3145730
  2146   300002  1F                 	db	31
  2147                           
  2148                           ;Config register CONFIG2H @ 0x300003
  2149                           ;	unspecified, using default values
  2150                           ;	Watchdog Timer Enable bit
  2151                           ;	WDT = 0x1, unprogrammed default
  2152                           ;	Watchdog Timer Postscale Select bits
  2153                           ;	WDTPS = 0xF, unprogrammed default
  2154   300003                     	org	3145731
  2155   300003  1F                 	db	31
  2156                           
  2157                           ; Padding undefined space
  2158   300004                     	org	3145732
  2159   300004  FF                 	db	255
  2160                           
  2161                           ;Config register CONFIG3H @ 0x300005
  2162                           ;	unspecified, using default values
  2163                           ;	PORTB A/D Enable bit
  2164                           ;	PBADEN = 0x1, unprogrammed default
  2165                           ;	Low-Power Timer 1 Oscillator Enable bit
  2166                           ;	LPT1OSC = 0x0, unprogrammed default
  2167                           ;	MCLR Pin Enable bit
  2168                           ;	MCLRE = 0x1, unprogrammed default
  2169   300005                     	org	3145733
  2170   300005  82                 	db	130
  2171                           
  2172                           ;Config register CONFIG4L @ 0x300006
  2173                           ;	unspecified, using default values
  2174                           ;	Stack Full/Underflow Reset Enable bit
  2175                           ;	STVREN = 0x1, unprogrammed default
  2176                           ;	Single-Supply ICSP Enable bit
  2177                           ;	LVP = 0x1, unprogrammed default
  2178                           ;	Boot Block Size Select bit
  2179                           ;	BBSIZ = 0x0, unprogrammed default
  2180                           ;	Extended Instruction Set Enable bit
  2181                           ;	XINST = 0x0, unprogrammed default
  2182                           ;	Background Debugger Enable bit
  2183                           ;	DEBUG = 0x1, unprogrammed default
  2184   300006                     	org	3145734
  2185   300006  85                 	db	133
  2186                           
  2187                           ; Padding undefined space
  2188   300007                     	org	3145735
  2189   300007  FF                 	db	255
  2190                           
  2191                           ;Config register CONFIG5L @ 0x300008
  2192                           ;	unspecified, using default values
  2193                           ;	Code Protection bit
  2194                           ;	CP0 = 0x1, unprogrammed default
  2195                           ;	Code Protection bit
  2196                           ;	CP1 = 0x1, unprogrammed default
  2197                           ;	Code Protection bit
  2198                           ;	CP2 = 0x1, unprogrammed default
  2199                           ;	Code Protection bit
  2200                           ;	CP3 = 0x1, unprogrammed default
  2201   300008                     	org	3145736
  2202   300008  0F                 	db	15
  2203                           
  2204                           ;Config register CONFIG5H @ 0x300009
  2205                           ;	unspecified, using default values
  2206                           ;	Boot Block Code Protection bit
  2207                           ;	CPB = 0x1, unprogrammed default
  2208                           ;	Data EEPROM Code Protection bit
  2209                           ;	CPD = 0x1, unprogrammed default
  2210   300009                     	org	3145737
  2211   300009  C0                 	db	192
  2212                           
  2213                           ;Config register CONFIG6L @ 0x30000A
  2214                           ;	unspecified, using default values
  2215                           ;	Write Protection bit
  2216                           ;	WRT0 = 0x1, unprogrammed default
  2217                           ;	Write Protection bit
  2218                           ;	WRT1 = 0x1, unprogrammed default
  2219                           ;	Write Protection bit
  2220                           ;	WRT2 = 0x1, unprogrammed default
  2221                           ;	Write Protection bit
  2222                           ;	WRT3 = 0x1, unprogrammed default
  2223   30000A                     	org	3145738
  2224   30000A  0F                 	db	15
  2225                           
  2226                           ;Config register CONFIG6H @ 0x30000B
  2227                           ;	unspecified, using default values
  2228                           ;	Configuration Register Write Protection bit
  2229                           ;	WRTC = 0x1, unprogrammed default
  2230                           ;	Boot Block Write Protection bit
  2231                           ;	WRTB = 0x1, unprogrammed default
  2232                           ;	Data EEPROM Write Protection bit
  2233                           ;	WRTD = 0x1, unprogrammed default
  2234   30000B                     	org	3145739
  2235   30000B  E0                 	db	224
  2236                           
  2237                           ;Config register CONFIG7L @ 0x30000C
  2238                           ;	unspecified, using default values
  2239                           ;	Table Read Protection bit
  2240                           ;	EBTR0 = 0x1, unprogrammed default
  2241                           ;	Table Read Protection bit
  2242                           ;	EBTR1 = 0x1, unprogrammed default
  2243                           ;	Table Read Protection bit
  2244                           ;	EBTR2 = 0x1, unprogrammed default
  2245                           ;	Table Read Protection bit
  2246                           ;	EBTR3 = 0x1, unprogrammed default
  2247   30000C                     	org	3145740
  2248   30000C  0F                 	db	15
  2249                           
  2250                           ;Config register CONFIG7H @ 0x30000D
  2251                           ;	unspecified, using default values
  2252                           ;	Boot Block Table Read Protection bit
  2253                           ;	EBTRB = 0x1, unprogrammed default
  2254   30000D                     	org	3145741
  2255   30000D  40                 	db	64
  2256                           tosu	equ	0xFFF
  2257                           tosh	equ	0xFFE
  2258                           tosl	equ	0xFFD
  2259                           stkptr	equ	0xFFC
  2260                           pclatu	equ	0xFFB
  2261                           pclath	equ	0xFFA
  2262                           pcl	equ	0xFF9
  2263                           tblptru	equ	0xFF8
  2264                           tblptrh	equ	0xFF7
  2265                           tblptrl	equ	0xFF6
  2266                           tablat	equ	0xFF5
  2267                           prodh	equ	0xFF4
  2268                           prodl	equ	0xFF3
  2269                           indf0	equ	0xFEF
  2270                           postinc0	equ	0xFEE
  2271                           postdec0	equ	0xFED
  2272                           preinc0	equ	0xFEC
  2273                           plusw0	equ	0xFEB
  2274                           fsr0h	equ	0xFEA
  2275                           fsr0l	equ	0xFE9
  2276                           wreg	equ	0xFE8
  2277                           indf1	equ	0xFE7
  2278                           postinc1	equ	0xFE6
  2279                           postdec1	equ	0xFE5
  2280                           preinc1	equ	0xFE4
  2281                           plusw1	equ	0xFE3
  2282                           fsr1h	equ	0xFE2
  2283                           fsr1l	equ	0xFE1
  2284                           bsr	equ	0xFE0
  2285                           indf2	equ	0xFDF
  2286                           postinc2	equ	0xFDE
  2287                           postdec2	equ	0xFDD
  2288                           preinc2	equ	0xFDC
  2289                           plusw2	equ	0xFDB
  2290                           fsr2h	equ	0xFDA
  2291                           fsr2l	equ	0xFD9
  2292                           status	equ	0xFD8

Data Sizes:
    Strings     67
    Constant    0
    Data        13
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     20      39
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    clcd_print@data	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[17]), STR_10(CODE[3]), STR_11(CODE[17]), STR_2(CODE[9]), 
		 -> STR_3(CODE[3]), STR_4(CODE[3]), STR_5(CODE[3]), STR_6(CODE[3]), 
		 -> STR_7(CODE[3]), STR_8(CODE[3]), STR_9(CODE[3]), 

    dashboard@events	PTR unsigned char [8] size(1) Largest target is 3
		 -> STR_10(CODE[3]), STR_3(CODE[3]), STR_4(CODE[3]), STR_5(CODE[3]), 
		 -> STR_6(CODE[3]), STR_7(CODE[3]), STR_8(CODE[3]), STR_9(CODE[3]), 

    dashboard@F10484	PTR unsigned char [8] size(1) Largest target is 3
		 -> STR_10(CODE[3]), STR_3(CODE[3]), STR_4(CODE[3]), STR_5(CODE[3]), 
		 -> STR_6(CODE[3]), STR_7(CODE[3]), STR_8(CODE[3]), STR_9(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_password
    _password->_clcd_putch
    _init_config->_clcd_print
    _init_clcd->_clcd_write
    _dashboard->_clcd_putch
    _clcd_putch->___awdiv
    _clcd_print->_clcd_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    9163
                                             19 COMRAM     1     1      0
                          _dashboard
                        _init_config
                           _password
                      _read_switches
 ---------------------------------------------------------------------------------
 (1) _read_switches                                        1     1      0      30
                                              0 COMRAM     1     1      0
                           _scan_key
 ---------------------------------------------------------------------------------
 (2) _scan_key                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _password                                             9     9      0    2900
                                             10 COMRAM     9     9      0
                         _clcd_print
                         _clcd_putch
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0    2435
                         _clcd_print
                           _init_adc
                          _init_clcd
                 _init_matrix_keypad
 ---------------------------------------------------------------------------------
 (2) _init_matrix_keypad                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            1     1      0     880
                                              2 COMRAM     1     1      0
                         _clcd_write
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dashboard                                            8     8      0    3752
                                             10 COMRAM     8     8      0
                            ___awdiv
                            ___awmod
                         _clcd_print
                         _clcd_putch
                           _read_adc
 ---------------------------------------------------------------------------------
 (2) _read_adc                                             7     5      2      45
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _clcd_putch                                           2     1      1    1228
                                              8 COMRAM     2     1      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                         _clcd_write
 ---------------------------------------------------------------------------------
 (2) _clcd_print                                           2     0      2    1555
                                              2 COMRAM     2     0      2
                         _clcd_write
 ---------------------------------------------------------------------------------
 (3) _clcd_write                                           2     1      1     880
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dashboard
     ___awdiv
     ___awmod
     _clcd_print
       _clcd_write
     _clcd_putch
       ___awdiv (ARG)
       ___awmod (ARG)
       _clcd_write (ARG)
     _read_adc
   _init_config
     _clcd_print
     _init_adc
     _init_clcd
       _clcd_write
     _init_matrix_keypad
   _password
     _clcd_print
     _clcd_putch
   _read_switches
     _scan_key

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      22        0.0%
BITBIGSFRll        281      0       0      20        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     14      27       1       41.1%
BITBIGSFRhhhl       2C      0       0      17        0.0%
BITBIGSFRlhh        2A      0       0      18        0.0%
BITBIGSFRlhl         F      0       0      19        0.0%
BITBIGSFRhhhh        E      0       0      16        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      27      21        0.0%
DATA                 0      0      27       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon May 20 22:12:03 2024

                          _i 0022               clcd_print@addr 0004               clcd_print@data 0003  
                         l33 0D4C                           l36 0C2C                           l61 0D02  
                         l62 0D06                           l71 0CCC                           l39 0C58  
                         l65 0AB8                           l74 0D64                           l91 0D2C  
                         _GO 7E11                           u60 07AA                           u61 07A6  
                         u70 07BE                           u71 07BA                           u80 07D2  
                         u81 07CE                           u90 07E6                           u91 07E2  
               ___awdiv@sign 0006           _init_matrix_keypad 0D66                          l130 0806  
                        l122 07B0                          l131 0842                          l123 089C  
                        l204 0B56                          l140 089A                          l132 081A  
                        l124 07EC                          l141 0886                          l125 07C4  
                        l134 082E                          l119 0D76                          l127 07D8  
                        l152 0BCC                          l137 085E                          l139 0872  
                        l182 0794                          l451 0A10                          l438 0960  
                        l900 0D2E                          l902 0D42                          l904 0D4A  
                        l962 0D66                          l970 07AA                          l964 0D6E  
                        l966 0D70                          l982 07D2                          l992 0800  
                        l976 07BE                          l968 0796                          l988 07E6  
                        l998 0814                          _RC0 7C10                          _RC1 7C11  
                        _RC2 7C12                          u100 0800                          u101 07FC  
                        u110 0814                          u111 0810                          _RD7 7C1F  
                        u120 0828                          u121 0824                          u130 083C  
                        u131 0838                          u140 0858                          u300 0B6A  
                        u141 0854                          u301 0B66                          u150 086C  
                        u310 0B80                          u151 0868                          u311 0B7C  
                        u160 0880                          u320 0B90                          u161 087C  
                        u321 0B8C                          u170 0894                          u330 0BAA  
                        u171 0890                          u331 0BA6                          u340 0BC2  
                        u341 0BBE                          u600 090E                          u520 0CE0  
                        u601 090A                          u521 0CDA                          u610 092A  
                        u611 0926                          u620 0950                          u540 0D02  
                        u700 067E                          u621 094C                          u541 0CFE  
                        u701 067A                          u630 0974                          u550 0C3A  
                        u710 069A                          u631 0970                          u535 0CE2  
                        u551 0C36                          u711 0696                          u640 098E  
                        u560 0CCC                          u720 06B0                          u800 0B1C  
                        u641 098A                          u561 0CC8                          u721 06AC  
                        u801 0B18                          u570 08B0                          u650 09A8  
                        u730 06CC                          u810 0B4C                          u571 08AC  
                        u651 09A4                          u731 06C8                          u811 0B48  
                        u580 08CA                          u660 09C6                          u740 06E2  
                        u820 0BEE                          u581 08C6                          u661 09C2  
                        u741 06DE                          u821 0BEA                          u590 08F0  
                        u670 09DC                          u750 06FE                          u830 0C06  
                        u591 08EC                          u671 09D8                          u751 06FA  
                        u831 0C02                          u680 0A00                          u760 0710  
                        u681 09FC                          u761 070C                          u770 0722  
                        u771 071E                          u691 0650                          u907 0AB2  
                        u780 0754                          u781 0750                          u790 0AEA  
                        u847 0A24                          u791 0AE6                          u857 0A3E  
                        u867 0A54                          u877 0A76                          u887 0A88  
                        u897 0A9E                          _key 0027               clcd_putch@addr 0009  
             clcd_putch@data 000A                 ___awmod@sign 0006                          wreg 0FE8  
        ?_init_matrix_keypad 0001                         l1010 083C                         l1020 086C  
                       l1004 0828                         l1014 0858                         l1032 0894  
                       l1026 0880                         l1130 0B6A                         l1300 0AA6  
                       l1036 089A                         l1132 0B70                         l1310 0CB4  
                       l1302 0AB0                         l1134 0B80                         l1142 0B9A  
                       l1320 08B8                         l1240 0CE2                         l1304 0C94  
                       l1312 0D50                         l1400 0D20                         l1144 0BAA  
                       l1152 0BCA                         l1136 0B90                         l1128 0B5A  
                       l1330 08DE                         l1322 08BC                         l1314 089E  
                       l1250 0CEE                         l1242 0CE6                         l1306 0CA2  
                       l1410 069A                         l1402 0646                         l1146 0BB2  
                       l1340 0914                         l1332 08F0                         l1324 08CA  
                       l1316 08A2                         l1252 0CF0                         l1244 0CE8  
                       l1308 0CB2                         l1260 0C2A                         l1420 06E2  
                       l1412 069E                         l1404 0658                         l1148 0BC2  
                       l1342 092A                         l1334 08F8                         l1350 0940  
                       l1326 08D2                         l1318 08B0                         l1254 0CF2  
                       l1246 0CEA                         l1238 0CD0                         l1262 0C3A  
                       l1430 072A                         l1422 06EA                         l1414 06B0  
                       l1406 066C                         l1270 0A16                         l1352 0950  
                       l1344 0932                         l1336 0900                         l1328 08D6  
                       l1360 0966                         l1256 0CF4                         l1248 0CEC  
                       l1264 0C50                         l1432 0738                         l1424 06FE  
                       l1416 06CC                         l1408 067E                         l1280 0A48  
                       l1272 0A1C                         l1440 0AD8                         l1354 0958  
                       l1346 0934                         l1338 090E                         l1370 0996  
                       l1362 0974                         l1258 0C16                         l1434 0754  
                       l1426 0710                         l1418 06D2                         l1290 0A74  
                       l1282 0A52                         l1274 0A1E                         l1450 0B1C  
                       l1442 0AEA                         l1348 093A                         l1380 09DC  
                       l1372 09A8                         l1364 097C                         l1428 0722  
                       l1292 0A7C                         l1284 0A5A                         l1276 0A2E  
                       l1268 0A12                         l1452 0B28                         l1444 0AF6  
                       l1436 0ABC                         l1460 0BCE                         l1390 0A08  
                       l1382 09E4                         l1374 09B0                         l1366 0980  
                       l1358 0962                         l1294 0A86                         l1286 0A64  
                       l1278 0A38                         l1446 0B02                         l1438 0AC8  
                       l1470 0BEE                         l1462 0BD2                         l1384 09EA  
                       l1376 09B8                         l1368 098E                         l1296 0A8E  
                       l1288 0A6A                         l1456 0B38                         l1448 0B0A  
                       l1472 0BF6                         l1464 0BD6                         l1378 09C6  
                       l1386 09F0                         l1298 0A98                         l1394 0D08  
                       l1458 0B4C                         l1474 0C06                         l1466 0BD6  
                       l1388 0A00                         l1396 0D10                         l1468 0BDE  
                       l1398 0D14                         _ADFM 7E07                         _ADON 7E10  
                       STR_1 0612                         STR_2 0623                         STR_3 063E  
                       STR_4 0641                         STR_5 063B                         STR_6 062F  
                       STR_7 0632                         STR_8 0635                         STR_9 0638  
                       _RBPU 7F8F                         _main 0BCE                         fsr2h 0FDA  
                       indf2 0FDF                         fsr1l 0FE1                         fsr2l 0FD9  
                       start 0000         ??_init_matrix_keypad 0001                 ___param_bank 0000  
             clcd_write@byte 0002                        _ADCS0 7E00                        _ADCS1 7E01  
                      _ADCS2 7E02                        ?_main 0001                        _ACQT0 7E03  
                      _ACQT1 7E04                        _ACQT2 7E05              __end_of___awdiv 0962  
                      STR_10 062C                        STR_11 0601              __end_of___awmod 0A12  
            ___awdiv@divisor 0003                 ?_init_config 0001              ___awdiv@counter 0005  
                      _VCFG0 7E0C                        _VCFG1 7E0D                        _PORTB 0F81  
                      _PORTD 0F83                        _TRISB 0F93                        _TRISC 0F94  
                      _TRISD 0F95                        tablat 0FF5                        plusw1 0FE3  
                      plusw2 0FDB                        status 0FD8              __initialization 0C5A  
               __end_of_main 0C14                       ??_main 0014                __activetblptr 0001  
                     _ADCON0 0FC2                       _ADCON1 0FC1             read_switches@key 0026  
                     _ADRESH 0FC4                       _ADRESL 0FC3             ___awdiv@dividend 0001  
                     _GODONE 7E11                       _TRISD7 7CAF                    ??___awdiv 0005  
                  ??___awmod 0005             __end_of_init_adc 0D4E             __end_of_read_adc 0C5A  
           ___awdiv@quotient 0007              ___awmod@divisor 0003                       isa$std 0001  
           __end_of_scan_key 089E              ___awmod@counter 0005             __end_of_password 0B58  
               __pdataCOMRAM 0015                 __mediumconst 0000                       tblptrh 0FF7  
                     tblptrl 0FF6                       tblptru 0FF8                   __accesstop 0060  
    __end_of__initialization 0C86                ___rparam_used 0001               __pcstackCOMRAM 0001  
                 _clcd_print 0C94                   _clcd_putch 0D4E                   _clcd_write 0CCE  
          read_switches@once 0021                  password@key 0013                _read_switches 0B58  
          __end_of_dashboard 0796                    ?_init_adc 0001                    ?_read_adc 0001  
                  ?_scan_key 0001                      __Hparam 0000                    ?_password 0001  
                    __Lparam 0000                      ___awdiv 089E                      ___awmod 0962  
               __psmallconst 0600                      __pcinit 0C5A                      __ramtop 0600  
                    __ptext0 0BCE                      __ptext1 0B58                      __ptext2 0796  
                    __ptext3 0ABA                      __ptext4 0D08                      __ptext5 0D66  
                    __ptext6 0A12                      __ptext7 0D2E                      __ptext8 0646  
                    __ptext9 0C14            __end_of_init_clcd 0ABA             ___awmod@dividend 0001  
             ?_read_switches 0001         end_of_initialization 0C86                   ??_init_adc 0001  
                 ??_read_adc 0003                   ??_scan_key 0001                  ?_clcd_print 0003  
                ?_clcd_putch 0009                  ?_clcd_write 0001                   ??_password 000B  
                    postdec1 0FE5                      postinc0 0FEE                    _PORTBbits 0F81  
            read_adc@channel 0007              read_adc@reg_val 0005                   main@main_f 0014  
              __pidataCOMRAM 0D78                  _adc_reg_val 0024          start_initialization 0C5A  
            ??_read_switches 0001  read_switches@detection_type 0001                ??_init_config 0005  
                __pbssCOMRAM 0022                    _dashboard 0646                     ?___awdiv 0001  
                   ?___awmod 0001                  __smallconst 0600                    _init_clcd 0A12  
        __end_of_init_config 0D2E                 ??_clcd_print 0005                 ??_clcd_putch 000A  
 __end_of_init_matrix_keypad 0D78                 ??_clcd_write 0002                   ?_dashboard 0001  
      password@temp_password 000F                 password@pass 000B        clcd_write@control_bit 0001  
         __end_of_clcd_print 0CCE           __end_of_clcd_putch 0D66           __end_of_clcd_write 0D08  
                 ?_init_clcd 0001                    copy_data0 0C6E                     __Hrparam 0000  
                   __Lrparam 0000                 __Lsmallconst 0600                  _init_config 0D08  
                   __ptext10 0D4E                     __ptext11 0C94                     __ptext12 0CCE  
                   __ptext13 0962                     __ptext14 089E                     _init_adc 0D2E  
                   _read_adc 0C14                     _scan_key 0796                  ??_dashboard 000B  
                   _password 0ABA                     isa$xinst 0000              dashboard@F10484 0015  
                ??_init_clcd 0003        __end_of_read_switches 0BCE               password@F10488 001D  
            dashboard@events 000B  
